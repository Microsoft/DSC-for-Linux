// ===============================================================
//  MetaConfiguration
// ===============================================================
[ClassVersion("1.0.0"),Description("Local Configuration Manager settings.")] 
class MSFT_DSCMetaConfiguration
{
   [Description ("The time interval between consecutive runs for reapplying the configuration to get to the desired state." )]
   uint32 ConfigurationModeFrequencyMins;

   [Description ("Reboot node if needed.")] 
   boolean RebootNodeIfNeeded;

   [Description ("The configuration apply mode for the server."),
   ValueMap {"ApplyOnly","ApplyAndMonitor","ApplyAndAutoCorrect"},
   Values {"ApplyOnly","ApplyAndMonitor","ApplyAndAutoCorrect"}]
   string ConfigurationMode;

   [EmbeddedInstance("MSFT_Credential"),
   Description ("Default credential to access resources." )]
   string Credential;

   [Description ("The refresh mode for the server. Valid values are Pull and Push." ),
   ValueMap {"Push","Pull"},
   Values {"Push","Pull"}]
   string  RefreshMode;  

   [Description ("The certificate ID used to locate the certificate." )]
   string  CertificateID;

   [Description ("The configuration ID used to get the configuration from the pull server." )]
   string  ConfigurationID;       

   [Description ("Name of the configuration and module Download Manager." )]
   string  DownloadManagerName;    

   [Description ("Custom data that is specific to Download Manager." ),
   EmbeddedInstance("MSFT_KeyValuePair")]
   string  DownloadManagerCustomData[];    

   [Description ("The time interval between consecutive runs to get the action from the server." )]
   uint32  RefreshFrequencyMins;    

   [Description ("Overwrite modules when downloading from Pull Server." )]
   boolean AllowModuleOverwrite;

   [Read, Description("Current state of local configuration manager."),
   ValueMap{"Ready","Busy","PendingReboot"},
   Values{"Ready","Busy","PendingReboot"}] 
   string LocalConfigurationManagerState;

  [Description ("Array of configuration download manager objects that contain location information to download configurations" ) ,
  EmbeddedInstance("OMI_ConfigurationDownloadManager")]
  string  ConfigurationDownloadManagers[];    

  [Read,ValueMap{"Ready","Busy","PendingReboot"}, Values{"Ready","Busy","PendingReboot"}] string LocalConfigurationManagerState;
  [EmbeddedInstance("MSFT_PartialConfiguration")] string PartialConfigurations[];
};
