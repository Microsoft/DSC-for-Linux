#!/bin/bash

PATH=/usr/sbin:/sbin:/usr/bin:/bin

AUDISP_DIR=/etc/audisp/plugins.d

AUDISP_CONF=$AUDISP_DIR/auoms.conf

AUOMS_BIN=/opt/microsoft/auoms/bin/auoms
AUOMS_DATA=/var/opt/microsoft/auoms/data

AUDIT_RULES_FILE=/etc/audit/audit.rules
DSC_AUDIT_RULES_DIR=/opt/microsoft/omsconfig/modules/nxOMSAuditdPlugin/DSCResources/MSFT_nxOMSAuditdPluginResource/rules

OMS_AUDIT_V1_RULES_FILE=oms-security-audit-v1.rules
OMS_AUDIT_V2_RULES_FILE=oms-security-audit-v2.rules

OMS_AUDIT_RULES_PATH=/etc/audit/rules.d/oms-security-audit.rules

umask 027

AUDIT_VERSION=$(/sbin/auditctl -v | sed 's/^[^0-9]*\([0-9]\.[0-9]\).*$/\1/')
ARCH=$(uname -m)

if [ $(expr $AUDIT_VERSION "<" 1.8) == "1" ]; then
    DSC_AUDIT_RULES_FILE=${DSC_AUDIT_RULES_DIR}/${OMS_AUDIT_V1_RULES_FILE}
else
    DSC_AUDIT_RULES_FILE=${DSC_AUDIT_RULES_DIR}/${OMS_AUDIT_V2_RULES_FILE}
fi

get_plugin_state () {
    if [ ! -e $AUDISP_CONF ]; then
        echo None
    fi
    echo "$(grep '^ *active *= *' $AUDISP_CONF | tr -d ' ' | cut -d'=' -f2)"
}

use_augenrules () {
    if [ -e /sbin/augenrules -a -d /etc/audit/rules.d ]; then
        count=$(grep '## This file is automatically generated from' $AUDIT_RULES_FILE | wc -l)
        if [ $count -gt 0 ]; then
            return 0
        fi
    fi
    return 1
}

get_actual_rules () {
    if use_augenrules; then
        if [ -e $OMS_AUDIT_RULES_PATH ]; then
            cat $OMS_AUDIT_RULES_PATH
            return $?
        fi
        return 0
    else
        cat $AUDIT_RULES_FILE | awk '\
        BEGIN {
            emit = 0;
            start_found = 0;
            end_found = 0;
        }
        {
            if ($0 == "#### START OF OMS AUDIT RULES ####") { emit = 1; start_found = 1; next; }
            if ($0 == "#### END OF OMS AUDIT RULES ####") { emit = 0; end_found = 1; next; }
            if (emit == 1) { print; next; }
        }
        END {
            if (start_found != 1 || end_found != 1) { exit 1; }
        }'
        return $?
    fi
}

get_expected_rules () {
    if [ "$ARCH" == "x86_64" ]; then
        cat $DSC_AUDIT_RULES_FILE
    else
        grep -v "arch=b64" $DSC_AUDIT_RULES_FILE
    fi
}

remove_rules () {
    if use_augenrules; then
        if [ -e $OMS_AUDIT_RULES_PATH ]; then
            rm -f $OMS_AUDIT_RULES_PATH
            if [ $? -ne 0 ]; then
                echo "Failed to remove $OMS_AUDIT_RULES_PATH" >&2
                return 1
            fi
            /sbin/augenrules
            if [ $? -ne 0 ]; then
                echo "Failed to re-generate $AUDIT_RULES_FILE" >&2
                return 1
            fi
        fi
    else
        TmpFile=$(mktemp /tmp/OMSAUditdPlugin.XXXXXXXX)
        cat $AUDIT_RULES_FILE | awk '\
        BEGIN {
            emit = 1;
            start_found = 0;
            end_found = 0;
        }
        {
            if ($0 == "#### START OF OMS AUDIT RULES ####") { emit = 0; start_found = 1; next; }
            if ($0 == "#### END OF OMS AUDIT RULES ####") { emit = 1; end_found = 1; next; }
            if (emit == 1) { print; next; }
        }
        END {
            if (start_found != 1 || end_found != 1) { exit 1; }
        }' > $TmpFile
        if [ $? -ne 0 ]; then
            echo "Failed to remove OMS audit rules from $AUDIT_RULES_FILE" >&2
            rm -f $TmpFile
            return 1
        fi
        cp $TmpFile $AUDIT_RULES_FILE
        if [ $? -ne 0 ]; then
            echo "Failed to edit $AUDIT_RULES_FILE" >&2
            rm -f $TmpFile
            return 1
        fi
        rm -f $TmpFile
    fi
}

set_rules () {
    if use_augenrules; then
        get_expected_rules > $OMS_AUDIT_RULES_PATH
        if [ $? -ne 0 ]; then
            echo "Failed to create $OMS_AUDIT_RULES_PATH" >&2
            return 1
        fi
        chown root.root $OMS_AUDIT_RULES_PATH
        if [ $? -ne 0 ]; then
            echo "Failed to set ownership of $OMS_AUDIT_RULES_PATH" >&2
            rm -f $OMS_AUDIT_RULES_PATH
            return 1
        fi
        chmod 640 $OMS_AUDIT_RULES_PATH
        if [ $? -ne 0 ]; then
            echo "Failed to set permissions for $OMS_AUDIT_RULES_PATH" >&2
            rm -f $OMS_AUDIT_RULES_PATH
            return 1
        fi
        /sbin/augenrules
        if [ $? -ne 0 ]; then
            echo "Failed to re-generate $AUDIT_RULES_FILE" >&2
            rm -f $OMS_AUDIT_RULES_PATH
            return 1
        fi
    else
        TmpInFile=$(mktemp /tmp/OMSAUditdPlugin.XXXXXXXX)
        TmpOutFile=$(mktemp /tmp/OMSAUditdPlugin.XXXXXXXX)
        get_expected_rules > $TmpInFile
        cat $AUDIT_RULES_FILE | awk -v DSC_AUDIT_RULES_FILE=$TmpInFile '\
        BEGIN {
            emit = 1;
            start_found = 0;
            end_found = 0;
            count = 0;
            idx = 0;
        }
        {
            if (match($0, "^\\s*-e")) { if (idx == 0) {idx = count } next; }
            if ($0 == "#### START OF OMS AUDIT RULES ####") { emit = 0; start_found = 1; if (idx == 0) { idx = count;} next; }
            if ($0 == "#### END OF OMS AUDIT RULES ####") { emit = 1; end_found = 1; next; }
            if (emit == 1) { lines[count++] = $0; next; }
        }
        END {
            if (start_found != end_found) { exit 1; }
            if (idx == 0) { idx = count; }
            for (i = 0; i < idx; i++) { printf "%s\n", lines[i]; }
            print "#### START OF OMS AUDIT RULES ####"
            while(getline line<DSC_AUDIT_RULES_FILE){print line}
            print "#### END OF OMS AUDIT RULES ####"
            for (i = idx; i < count; i++) { printf "%s\n", lines[i]; }
        }' > $TmpOutFile
        rm -f $TmpInFile
        if [ $? -ne 0 ]; then
            echo "Failed to add/replace OMS audit rules to $AUDIT_RULES_FILE" >&2
            rm -f $TmpOutFile
            return 1
        fi
        cp $TmpOutFile $AUDIT_RULES_FILE
        if [ $? -ne 0 ]; then
            echo "Failed to edit $AUDIT_RULES_FILE" >&2
            rm -f $TmpOutFile
            return 1
        fi
        rm -f $TmpOutFile
    fi
}

get_rules_state () {
    actual=$(get_actual_rules)
    expected=$(get_expected_rules)
    if [ "$actual" == "$expected" ]; then
        echo yes
    fi
    echo no
}

get_state () {
    plugin_state=$(get_plugin_state)
    rules_state=$(get_rules_state)
    if [ "$plugin_state" == "None" ]; then
        echo None
    fi

    if [ "$plugin_state" == "yes" -a "$rules_state" == "yes" ]; then
        echo yes
    fi

    echo no
}

test_state () {
    state=$(get_state)
    case $state in
        yes)
            exit 0
            ;;
        no)
            exit 1
            ;;
        *)
            exit 2
            ;;
    esac
}

set_state () {
    # Restart omsagent (/etc/opt/microsoft/omsagent/conf/omsagent.d/auoms.conf has been added or removed)
    /opt/microsoft/omsagent/bin/service_control restart
    if [ $? -ne 0 ]; then
        exit 1
    fi

    plugin_state=$(get_plugin_state)
    rules_state=$(get_rules_state)
    # Exit success if the desired state is already set
    if [ "$plugin_state" == "$1" -a "$rules_state" == "$1" ]; then
        exit 0
    fi

    if [ "$plugin_state" != "$1" ]; then
        # Edit the conf file
        sed -i "s/^\( *active *= *\)[enosy]*/\1$1/" $AUDISP_CONF
        if [ $? -ne 0 ]; then
            exit 1
        fi

        # Notify auditd of changes
        service auditd reload
        if [ $? -ne 0 ]; then
            exit 1
        fi
    fi

    if [ "$rules_state" != "$1" ]; then
        if [ "$1" == "yes" ]; then
            set_rules
            if [ $? -ne 0 ]; then
                exit 1
            fi
        else
            remove_rules
            if [ $? -ne 0 ]; then
                exit 1
            fi
        fi

        /sbin/auditctl -R $AUDIT_RULES_FILE
        if [ $? -ne 0 ]; then
            echo "Failed to load audit rules file $AUDIT_RULES_FILE" >&2
            exit 1
        fi
    fi

    if [ "$1" = "no" ]; then
        # Make sure auoms has exited
        pgrep -f ${AUOMS_BIN} 2>&1 >/dev/null
        if [ $? -eq 0 ]; then
            # Kill it if it didn't exit
            pkill -KILL -f ${AUOMS_BIN}
        fi

        # Make sure that if we re-enable the plugin, we start fresh
        # Remove all auoms data (queues, etc...)
        rm -f ${AUOMS_DATA}/*
    fi
}

case $1 in
    test)
        test_state
        ;;
    enable)
        set_state "yes"
        ;;
    disable)
        set_state "no"
        ;;
    *)
        echo "Invalid command '$1'"
        exit 3
        ;;
esac
