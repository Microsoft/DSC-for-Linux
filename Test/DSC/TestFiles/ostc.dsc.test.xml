<?xml version="1.0" encoding="utf-8"?>
<varmap xmlns="http://smxinfranet/schemas/mcf/2002/01/varmap"
        assembly="..\Dsc.dll"
        dsc="DSC Automation Test"
        owner="v-mifu" contact="v-mifu">

  <!-- Variables. -->
  <snippet id="Variables">
    <!-- Linux Info. -->
    <rec key="nxHostName">10.199.192.141</rec>
    <rec key="nxUsername">root</rec>
    <rec key="nxPassword">OpsMgr2007R2</rec>
    <rec key="nxPort">22</rec>
    
    <rec key="testServiceName">atd</rec>
    <rec key="invalidServiceName">invalidService</rec>
    
    <!-- DSC Info. -->
    <rec key="dscHome">/home/scxuser/DSC</rec>
    <rec key="omiHome">%dscHome%/omi-1.0.8</rec>
    <rec key="omiserverHome">%omiHome%/output/bin/omiserver</rec>
    <rec key="dscLog">/tmp/dsc_out.log</rec>
    <rec key="loadErrorMsg">Loading the instance document from the pending location did not succeed</rec>
    <rec key="funcErrorMsg">The SendConfigurationApply function did not succeed</rec>
    
    <!-- Script Info. -->
    <rec key="scriptLocation">C:\Temp</rec>
    <rec key="mofPath">%scriptLocation%\%nxHostName%_MOF</rec>
    <rec key="configMofScriptPath">%scriptLocation%\config_%nxHostName%.ps1</rec>
    <rec key="dscSender">
      [void] (%configMofScriptPath%);    ########### Generate Mof ###########
      [void] (winrm set winrm/config/client '@{TrustedHosts="*"}');
      $securePass = ConvertTo-SecureString -string "%nxPassword%" -AsPlainText -Force;
      $cred= New-Object System.Management.Automation.PSCredential "%nxUsername%", $SecurePass;
      $opt = New-CimSessionOption -UseSsl:$true -SkipCACheck:$true -SkipCNCheck:$true -SkipRevocationCheck:$true;
      $demo1=New-CimSession -Credential:$cred -ComputerName:%nxHostName% -Port:5986 -Authentication:basic -SessionOption:$opt;
      Start-DscConfiguration -CimSession:$demo1 -Path:"%mofPath%" -Wait;
      Get-DscConfiguration -CimSession $demo1;
    </rec>
    
    <!-- Ssh Commands.-->
    <rec key="getPid">ps -ef | grep omiserver | grep -v grep | awk '{print $2}' | tr -d '\n'</rec>
    <rec key="kill">kill -9 </rec>
    <rec key="startOMI">%omiserverHome% &amp;&gt;%dscLog%&amp;</rec>
    <rec key="exportDSCPath">export OMI_HOME=%omiHome%/output</rec>
  </snippet>

  <!-- All Test Cases. -->
  <section dsc="All tests" cls="DSC.GroupHelper">
    <snipref id="Variables"/>

    <section sid="1" dsc="nxFile Provider">
      
      <var set="1" lvl="1" vid="661642" 
           dsc="[nxFile] Verify if specific destination file is created if the file doesn't exist before and enumerated Ensure property is Present" 
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | grep -i '%name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination file '%name%' is created under %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination file '%path%' is not created under %parentPath%.</rec>
      </var>

      <var set="1" lvl="1" vid="661643"
           dsc="[nxFile] Verify if specific destination file is removed if the file exists before and enumerated Ensure property is Absent"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Absent;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | grep -i '%name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination file '%name%' is deleted successfully.</rec>
        <rec key="failedMsg">The destination file '%path%' is not deleted.</rec>
      </var>

      <var set="1" lvl="1" vid="661649"
           dsc="[nxFile] Verify if specific destination folder is created if the folder doesn't exist before and enumerated Ensure property is Present"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Directory;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^d' | grep -i '%name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination folder '%name%' is created successfully.</rec>
        <rec key="failedMsg">The destination folder '%path%' is not created.</rec>
      </var>

      <var set="1" lvl="1" vid="661650"
           dsc="[nxFile] Verify if specific destination folder is removed if the folder exists before enumerated Ensure property is Absent"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;mkdir %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Absent;Type:Directory;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^d' | grep -i '%name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination folder '%name%' is removed successfully.</rec>
        <rec key="failedMsg">The destination folder '%path%' is not removed.</rec>
      </var>

      <var set="1" lvl="2" vid="661652"
           dsc="[nxFile] Verify if specific path has multiple levels is created successfully"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%/a/b/c;Ensure:Present;Type:Directory</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %path%/a/b | grep '^d' | grep -i 'c$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination file '%path%/a/b/c' is created successfully.</rec>
        <rec key="failedMsg">The destination folder '%path%/a/b/c' is not created.</rec>
      </var>

      <var set="1" lvl="2" vid="661653"
           dsc="[nxFile] Verify if specific non-empty directory is removed successfully when Ensure is Absent"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;mkdir %path%;mkdir %path%/a;mkdir %path%/a/b;mkdir %path%/a/b/c</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Absent;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | grep -i '%name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination file '%path%' is removed successfully.</rec>
        <rec key="failedMsg">The destination folder '%path%' is not removed.</rec>
      </var>

      <var set="1" lvl="2" vid="661654"
           dsc="[nxFile] Verify if specific contents are filled into empty file successfully"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Contents:This is a test file!</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%| tr -d '\n'</rec>
        <rec key="expectedValue">This is a test file!</rec>
        <rec key="successfulMsg">The specific contents 'This is a test file!' is in file %path%. Successfully.</rec>
        <rec key="failedMsg">The specific contents 'This is a test file!' isn't in file %path%. Failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661655"
           dsc="[nxFile] Verify if specific file updates the contents successfully"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%;echo "Hello World" >> %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Contents:This is a test file! -- updated</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path% | grep updated | tr -d '\n'</rec>
        <rec key="expectedValue">This is a test file! -- updated</rec>
        <rec key="successfulMsg">The specific contents 'This is a test file!-- updated' Successfully updated in file %path%.</rec>
        <rec key="failedMsg">The specific contents 'This is a test file!-- updated' failed updated in file %path%. Failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661656"
           dsc="[nxFile] Verify if mode is set properly when the value of the specific mode is a 3 charater integer"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Mode:777</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">stat --format '%a' %path% | tr -d '\n'</rec>
        <rec key="expectedValue">777</rec>
        <rec key="successfulMsg">The specific mode of file %path% successfully set to 777.</rec>
        <rec key="failedMsg">Set the specific mode of file %path% to 777 failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661657"
           dsc="[nxFile] Verify if mode is set properly when the value of the specific mode is a 3 charater integer"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path% ; touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Mode:rwxrwxrwx</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">stat --format '%A' %path% | tr -d '\n'</rec>
        <rec key="expectedValue">-rwxrwxrwx</rec>
        <rec key="successfulMsg">The specific mode of file %path% successfully set to 777.</rec>
        <rec key="failedMsg">Set the specific mode of file %path% to 777 failed.</rec>
      </var>

      <var set="1" lvl="3" vid="661658"
           dsc="[nxFile] Verify if error out when the value of the specific mode is invalid"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Mode:abcabacas</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invalid Mode.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="1" lvl="2" vid="661659"
           dsc="[nxFile] Verify if Group property of file is set as correct as specified"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Group:scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cd %parentPath%;ls -al | grep %name% | awk '{print $4}'| tr -d '\n'</rec>
        <rec key="expectedValue">scxuser</rec>
        <rec key="successfulMsg">The Group property of file %path% successfully set to scxuser.</rec>
        <rec key="failedMsg">The Group property of file %path% failed set to scxuser.</rec>
      </var>

      <var set="1" lvl="3" vid="661660" 
           dsc="[nxFile] Verify if error out if the specific Group account doesn't exist on DSC server" 
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialType">file</rec>
        <rec key="initialState">present</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Group:abcdc</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invalid group.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="1" lvl="2" vid="661661"
           dsc="[nxFile] Verify if Owner property of file is set as correct as specified"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Owner:scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cd %parentPath%;ls -al | grep %name% | awk '{print $3}'| tr -d '\n'</rec>
        <rec key="expectedValue">scxuser</rec>
        <rec key="successfulMsg">The Owner property of file %path% successfully set to scxuser.</rec>
        <rec key="failedMsg">The Owner property of file %path% failed set to scxuser.</rec>
      </var>

      <var set="1" lvl="2" vid="661662"
           dsc="[nxFile] Verify if error out if the specific Owner account doesn't exist on DSC server"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Owner:abas</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invalid Owner.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="1" lvl="2" vid="661663"
           dsc="[nxFile] Verify if destination path is created as well as source path, included all subdirectories if specific Recurse is true"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_folder">subfolder</rec>
        <rec key="s_file">file</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;mkdir %s_path%/%s_folder%;touch %s_path%/%s_file%;touch %s_path%/%s_folder%/%s_file%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">null=`diff -r %s_path% %path%`;echo $?  | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%' successfully.</rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661664"
           dsc="[nxFile] Verify if destination path is created as well as source path, not included any subdirectories if specific Recurse is false"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_folder">subfolder</rec>
        <rec key="s_file">file</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;mkdir %s_path%/%s_folder%;touch %s_path%/%s_file%;touch %s_path%/%s_folder%/%s_file%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:false;Type:Directory</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">t=`ls -l %parentPath% | grep '^d' | grep -i ' %name%$' | wc -l | tr -d '\n'`;s=`ls %path% | wc -l | tr -d '\n'`;echo $t$s  | tr -d '\n'</rec>
        <rec key="expectedValue">10</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%' successfully.</rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661665"
           dsc="[nxFile] Verify if the taget of the symbolic link is copied if specific Links property is Follow"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_link">link</rec>
        <rec key="target">target</rec>
        <rec key="t_path">%parentPath%/%target%</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;touch %t_path%;mkdir %s_path%;cd %s_path%;ln -s %t_path% %s_link%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;rm -rf %t_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Type:Directory;Links:Follow;Recurse:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">d_md5=`md5sum %path%/%s_link% | awk '{print $1}' | tr -d '\n'`;t_md5=`md5sum %t_path% | awk '{print $1}' | tr -d '\n'`;if [ &quot;$d_md5&quot; = &quot;$t_md5&quot; ]; then echo '1'; else echo '0'; fi  | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The taget of the symbolic link is copied .</rec>
        <rec key="failedMsg">The taget of the symbolic link is not copied.</rec>
      </var>

      <var set="1" lvl="2" vid="661667"
           dsc="[nxFile] Verify if the link itself is copied if specific Links property is Manage"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_link">link</rec>
        <rec key="target">target</rec>
        <rec key="t_path">%parentPath%/%target%</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;touch %t_path%;mkdir %s_path%;cd %s_path%;ln -s %t_path% %s_link%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;rm -rf %t_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Type:Directory;Links:Manage;Recurse:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">d_md5=`md5sum %path%/%s_link% | awk '{print $1}' | tr -d '\n'`;s_md5=`md5sum %s_path%/%s_link% | awk '{print $1}' | tr -d '\n'`;if [ &quot;$d_md5&quot; = &quot;$s_md5&quot; ]; then echo '1'; else echo '0'; fi  | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The link itself is copied.</rec>
        <rec key="failedMsg">The link itself is not copied.</rec>
      </var>

      <var set="1" lvl="2" vid="661668"
           dsc="[nxFile] Verify if the symbolic links are ignored if the specific Links property is ignore"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_link">link</rec>
        <rec key="target">target</rec>
        <rec key="t_path">%parentPath%/%target%</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;touch %t_path%;mkdir %s_path%;cd %s_path%;ln -s %t_path% %s_link%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;rm -rf %t_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Type:Directory;Links:Ignore;Recurse:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">t=`ls %path% | grep -i '%target%$' | wc -l | tr -d '\n'`;s=`ls %path% | grep -i '%s_link%$' | wc -l | tr -d '\n'`;echo $t$s | tr -d '\n'</rec>
        <rec key="expectedValue">00</rec>
        <rec key="successfulMsg">The link itself is copied.</rec>
        <rec key="failedMsg">The link itself is not copied.</rec>
      </var>

      <var set="1" lvl="2" vid="661671"
           dsc="[nxFile] Verify if file is created properly if the depended resource configuration run firstly"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="owner">temp_test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;</rec>
        <rec key="finalCmd">rm -rf %path%;userdel -f -r %owner%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Owner:%owner%;DependsOn:[nxUser]user</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">f=`ls -l %parentPath% | grep '^-' | grep -i '%name%$' | wc -l | tr -d '\n'`;u=`ls -l %parentPath% | grep '^-' | grep -i '%name%$' | awk '{print $3}' | tr -d '\n'`;echo $f$u | tr -d '\n'</rec>
        <rec key="expectedValue">1%owner%</rec>
        <rec key="successfulMsg">The file is created by depended new user.</rec>
        <rec key="failedMsg">The file is not created.</rec>
      </var>

      <var set="1" lvl="2" vid="661672"
           dsc="[nxFile] Verify if the specific directory which has the same name with existing file is created if configured Force property is true"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialType">file</rec>
        <rec key="initialState">absent</rec>
        <rec key="initialCmd">rm -rf %path%; touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Directory;Force:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^d' | grep -i '%name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination folder '%name%' is created under %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination folder '%path%' is not created under %parentPath%.</rec>
      </var>

      <var set="1" lvl="2" vid="661674"
           dsc="[nxFile] Verify if the destination path is copied from source path successfully if file of the same name exists and the configured Force property is true"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_folder">subfolder</rec>
        <rec key="s_file">file</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%;rm -rf %s_path%;mkdir %s_path%;mkdir %s_path%/%s_folder%;touch %s_path%/%s_file%;touch %s_path%/%s_folder%/%s_file%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Force:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">null=`diff -r %s_path% %path%`;echo $?  | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%' successfully.</rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661675"
            dsc="[nxFile] Verify if the specific file which has the same name with existing folder is created if configured Force property is true"
            cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_661675</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;mkdir %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Force:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | grep -i '%name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination file "path" which has the same name with a existing foler is created successfully, if the Force property is set to "true" .</rec>
        <rec key="failedMsg">The destination file "path" which has the same name with a existing foler is not created, though the Force property has been set to "true".</rec>
      </var>
      
      <var set="1" lvl="3" vid="661676"
            dsc="[nxFile] Verify if error out without Force property when the specific file which has the same name with existing folder"
            cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_661676</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;mkdir %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <!--rec key="successfulMsg">PowerShell error as the same name folder existing.</rec-->
        <!--rec key="failedMsg">PowerShell should error out but it succeeds!</rec-->
      </var>
      
      <var set="1" lvl="3" vid="661677"
            dsc="[nxFile] Verify if error out when the specific directory which has the same name with existing file is created and configured Force property is false"
            cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_661677</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Directory;Force:false</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <!--rec key="successfulMsg">PowerShell error as the same name file existing.</rec-->
        <!--rec key="failedMsg">PowerShell should error out but it succeeds!</rec-->
      </var>

      <var set="1" lvl="2" vid="661678"
           dsc="[nxFile] Verify if destination file is updated if the configured Checksum is ctime and the source is newer than destination file"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="content">mtime is newer but ctime is ealier</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">mtime is ealier but ctime is newer</rec>
        <!-- The source's mtime is earlier but ctime is later. -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;echo '%s_content%' &gt; %s_path%/%s_file%; sleep 1;echo '%content%' &gt; %path%/%s_file%;sleep 1;chmod a+x %s_path%/%s_file%</rec> 
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Checksum:ctime</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%/%s_file% | tr -d '\n'</rec>
        <rec key="expectedValue">%s_content%</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%' successfully.</rec>
        <rec key="failedMsg">Didn't update.</rec>
      </var>

      <var set="1" lvl="3" vid="661679"
           dsc="[nxFile] Verify if destination file is not changed if the configured Checksum is ctime and the source is older than destination file"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="content">Init Content: mtime is ealier but ctime is newer</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">Source Content: mtime is newer but ctime is ealier</rec>
        <!-- The source's mtime is later but ctime is earlier. -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;echo '%s_content%' &gt; %s_path%/%s_file%; sleep 1;echo '%content%' &gt; %path%/%s_file%;sleep 1;chmod a+x %path%/%s_file%</rec> 
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%/%s_file%;SourcePath:%s_path%/%s_file%;Ensure:Present;Checksum:ctime</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%/%s_file% | tr -d '\n'</rec>
        <rec key="expectedValue">%content%</rec>
        <rec key="successfulMsg">The destination path didn't update as its ctime is newer.</rec>
        <rec key="failedMsg">The ctime of destination is newer but it was updated.</rec>
      </var>

      <var set="1" lvl="2" vid="661680"
           dsc="[nxFile] Verify if destination file is updated if the configured Checksum is mtime and the source is newer than destination file"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="content">Init Content: mtime is ealier but ctime is newer</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">Source Content: mtime is newer but ctime is ealier</rec>
        <!-- The source's mtime is later but ctime is earlier. -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;echo '%content%' &gt; %path%/%s_file%;sleep 1;echo '%s_content%'  &gt; %s_path%/%s_file%; sleep 1;chmod a+x %path%/%s_file%</rec> 
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Checksum:mtime</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%/%s_file%  | tr -d '\n'</rec>
        <rec key="expectedValue">%s_content%</rec>
        <rec key="successfulMsg">The destination is updated as its mtime is earlier.</rec>
        <rec key="failedMsg">The mtime of destination is earlier but it was not updated.</rec>
      </var>

      <var set="1" lvl="3" vid="661681"
           dsc="[nxFile] Verify if destination file is not updated if the configured Checksum is mtime and the source is older than destination file"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="content">mtime is newer but ctime is ealier</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">mtime is ealier but ctime is newer</rec>
        <!-- The source's mtime is earlier but ctime is later. -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;echo '%s_content%'  &gt; %s_path%/%s_file%; sleep 1;echo '%content%'  &gt; %path%/%s_file%;</rec> <!--sleep 1;chmod a+x %s_path%/%s_file%-->
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Checksum:mtime</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%/%s_file%  | tr -d '\n'</rec>
        <rec key="expectedValue">%content%</rec>
        <rec key="successfulMsg">The destination is not updated as its mtime is newer.</rec>
        <rec key="failedMsg">The mtime of destination is newer but it was updated.</rec>
      </var>

      <var set="1" lvl="2" vid="661682"
           dsc="[nxFile] Verify if destination file is updated if the configured Checksum is md5 and the source is other than destination file"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">md5 is changed.</rec>
        <!-- The source's md5 value is changed. -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;echo '%s_content%'  &gt; %s_path%/%s_file%;</rec> 
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Checksum:md5</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%/%s_file% | tr -d '\n'</rec>
        <rec key="expectedValue">%s_content%</rec>
        <rec key="successfulMsg">The destination is updated as its md5 value is different than source.</rec>
        <rec key="failedMsg">The md5 value of destination is different than source but it wasn't updated.</rec>
      </var>

      <var set="1" lvl="3" vid="661683"
           dsc="[nxFile] Verify if destination file is updated if the configured Checksum is md5 and the source is other than destination file"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">md5 is changed.</rec>
        <rec key="destinationPathProperty">/tmp/dp.prop</rec>
        <!-- The md5 value is the same, but the ctime is different . -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;sleep 1;chmod guoa+rwx %path%;f=`ls -lc %path% | tr -d '\n'`;echo $f  &gt; %destinationPathProperty%</rec> 
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Checksum:md5</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">org=`cat %destinationPathProperty%`;f=`ls -lc %path% | tr -d '\n'`;echo $f  &gt; %destinationPathProperty%;new=`cat %destinationPathProperty%`;if [ &quot;$org&quot; = &quot;$new&quot; ]; then echo '1'; else echo '0'; fi | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination is not updated as its md5 value is the same as source.</rec>
        <rec key="failedMsg">The md5 value of destination is the same as source but it was updated.</rec>
      </var>

      <var set="1" lvl="2" vid="668030"
           dsc="[nxFile] Verify if specific destination link is created and linked to the specific SourcePath"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%</rec>
        <rec key="finalCmd">rm -rf %path%; rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Link;SourcePath:%s_path%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^l' | grep -i '%name% -> %s_path%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination link '%name%' linked to '%s_path%' is created under %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination link '%path%' is not created under %parentPath%.</rec>
      </var>

      <var set="1" lvl="2" vid="668041"
           dsc="[nxFile] Verify if specific destination link is removed if the link exists before and the Ensure is Absent"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;ln -s %s_path% %path%</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Absent;Type:Link</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^l' | grep -i '%name% -> %s_path%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination link '%path%' linked to '%s_path%' is removed from %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination link '%name%' is not removed from %parentPath%.</rec>
      </var>

      <var set="1" lvl="2" vid="668048"
           dsc="[nxFile] Verify if specific destination link whose path does exists as other type is created if the Force is true"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;mkdir %path%</rec>
        <rec key="finalCmd">rm -rf %path%; rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Link;SourcePath:%s_path%;Force:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^l' | grep -i '%name% -> %s_path%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination link '%name%' linked to '%s_path%' is created under %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination link '%path%' is not created under %parentPath%.</rec>
      </var>

      <var set="1" lvl="2" vid="668054"
           dsc="[nxFile] Verify if specific destination link is updated successfully if the link exists before"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;ln -s /tmp %path%</rec>
        <rec key="finalCmd">rm -rf %path%; rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Link;SourcePath:%s_path%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^l' | grep -i '%name% -> %s_path%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination link '%name%' is updated to link to '%s_path%'  under %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination link '%path%' is not updated under %parentPath%.</rec>
      </var>

      <var set="1" lvl="3" vid="668059"
           dsc="[nxFile] Verify if error out if the specific destination link whose path does exists as other type and the specific Force is false"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%; rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Link;SourcePath:%s_path%;Force:false</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
      </var>

      <var set="1" lvl="2" vid="668094"
           dsc="[nxFile] Verify if error out when try to create a link but there is no SourcePath property in the configuration MOF"
           cls="DSC.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Link</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^l' | grep -i '%name% -> %s_path%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
      </var>

  </section>

    <section sid="2" dsc="nxUser Provider">
      
      <var set="2" lvl="1" vid="661686" 
           dsc="[nxUser] Verify a new user is created when provide a new userName and set Ensure to Present" 
           cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The user '%username%' is created successfully.</rec>
        <rec key="failedMsg">The user '%username%' is not created.</rec>
      </var>
      
      <var set="2" lvl="1" vid="661688" dsc="[nxUser] Verify an existing user is deleted when provide an existing userName and set Ensure to absent" cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661688</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username%; cat /etc/passwd|grep -i "^%username%"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Absent;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The user '%username%' is deleted successfully.</rec>
        <rec key="failedMsg">The user '%username%' is not deleted.</rec>
      </var>

      <var set="2" lvl="2" vid="661689" dsc="[nxUser] Verify the full name is added to the user information on the target node" cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661689</rec>
        <rec key="fullName">%username%_full</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username%; cat /etc/passwd|grep -i "^%username%"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | grep -i "%fullName%"| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The full name "%fullName%" is added to the user information.</rec>
        <rec key="failedMsg">The full name "%fullName%" is not added to the user information.</rec>
      </var>

      <var set="2" lvl="3" vid="661690" dsc="[nxUser] Verify the  Full Name property can be modified" cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661690</rec>
        <rec key="fullName">Test Hot</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username% -c %username%_full; cat /etc/passwd|grep -i "^%username%"|grep -i "%username%_full"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | grep -i "Test Hot"| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The full name is changed to "%fullName%".</rec>
        <rec key="failedMsg">The full name is not changed to "%fullName%".</rec>
      </var>

      <var set="2" lvl="2" vid="661691" dsc="[nxUser] Verify the Description is added to the User information on the target node" cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661691</rec>
        <rec key="fullName">Test Hot</rec>
        <rec key="description">GoodUser</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username% -c "Test Hot"; cat /etc/passwd|grep -i "^%username%"|grep -i "Test Hot"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%;Description:%description%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%' | grep -i "%fullName%,%description%"| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The description is added to the user information.</rec>
        <rec key="failedMsg">The description is not added to the user information.</rec>
      </var>

      <var set="2" lvl="3" vid="661692" dsc="[nxUser] Verify the Description can be modified" cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661692</rec>
        <rec key="fullName">Tester Cool</rec>
        <rec key="description">GoodUser!</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username% -c "Tester Cool,this is the description for this user"; cat /etc/passwd|grep -i "^%username%"|grep -i "Tester Cool,this is the description for this user"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%;Description:%description%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | grep -i "%fullName%,%description%"| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The description is changed to "%description%".</rec>
        <rec key="failedMsg">The description is not changed to "%description%".</rec>
      </var>

      <var set="2" lvl="2" vid="661693" dsc="[nxUser] Verify the PassWord can be added and provided as a salted SHA1 Hash, the User can be loged on with it when the Disabled is set to false." cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661693</rec>
        <rec key="fullName">Tester Cool</rec>
        <rec key="description">BadUser!</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username%; cat /etc/passwd|grep -i "^%username%"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%;Description:%BadUser%;Password:%password%;Disabled:false</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/shadow | grep -i '^%username%:' | tr ':'  ' ' | awk '{print $2}' | grep '^!' | wc -l | tr -d '\n'| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The password is added and provided as a salted SHA1 Hash, the user can login with it when the Disabled is set to false.</rec>
        <rec key="failedMsg">The password is added and provided as a salted SHA1 Hash, but the user can not login with it when the Disabled is set to false.</rec>
      </var>

      <var set="2" lvl="2" vid="661694" dsc="[nxUser] Verify the PassWord can be added and provided as a salted SHA1 Hash, the User can't be loged on with it when the Disabled is set to true" cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661694</rec>
        <rec key="fullName">Tester Cool</rec>
        <rec key="description">BadUser!</rec>
        <rec key="password">abcde</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username%; cat /etc/passwd|grep -i "^%username%"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%;Description:%description%;Password:%password%;Disabled:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/shadow | grep -i '^%username%:' | tr ':'  ' ' | awk '{print $2}' | grep '^!' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The password is added and provided as a salted SHA1 Hash, the user can not login with it when the Disabled is set to true.</rec>
        <rec key="failedMsg">The password is not added as a salted SHA1 Hash, or the user can login with the latest password even the Disabled is set to true </rec>
      </var>

      <var set="2" lvl="2" vid="661695" 
           dsc="[nxUser] Verify the User will be required to enter a new password on the next log on when set the PasswordChangeRequired to true" 
           cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;PasswordChangeRequired:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/shadow | grep -i '^%username%:' | tr ':' ' ' | awk '{print $3}' | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The user '%username%' is created successfully, its password must be changed in next login</rec>
      </var>

      <var set="2" lvl="2" vid="661696" 
           dsc="[nxUser] Verify the User won't be required to enter a new password on the next log on when set the PasswordChangeRequired to false"
           cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;PasswordChangeRequired:false</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">expire=`cat /etc/shadow | grep -i '^%username%:' | tr ':' ' ' | awk '{print $3}' | tr -d '\n'`;expr $expire - 7 | awk '{if ($0 > 0){print &quot;true&quot;} else {print &quot;false&quot;} }' | tr -d '\n'</rec>
        <rec key="expectedValue">true</rec>
      </var>

      <var set="2" lvl="2" vid="661698" 
           dsc="[nxUser] Verify the HomeDirectory is set correctly on the target node"
           cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="home">/home/testhome</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;HomeDirectory:%home%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | tr ':' ' ' | awk '{print $5}' | tr -d '\n'</rec>
        <rec key="expectedValue">%home%</rec>
      </var>

      <var set="2" lvl="3" vid="661699" 
           dsc="[nxUser] Verify the HomeDirectory can be modified" 
           cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="home">/home/testhome</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;useradd %username%</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;HomeDirectory:%home%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | tr ':' ' ' | awk '{print $5}' | tr -d '\n'</rec>
        <rec key="expectedValue">%home%</rec>
        <rec key="successfulMsg">The home for user '%username%' is set successfully.</rec>
      </var>

      <var set="2" lvl="2" vid="661701" 
           dsc="[nxUser] Verify the GroupID can be set correctly" 
           cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="groupID">0</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;GroupID:%groupID%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | tr ':' ' ' | awk '{print $4}' | tr -d '\n'</rec>
        <rec key="expectedValue">%groupID%</rec>
        <rec key="successfulMsg">The user '%username%' is created with corrct Group ID '%groupID%' successfully.</rec>
      </var>

      <var set="2" lvl="3" vid="661703" 
           dsc="[nxUser] Verify the GroupID can be modified"
           cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="groupID">0</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;useradd %username%</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;GroupID:%groupID%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | tr ':' ' ' | awk '{print $4}' | tr -d '\n'</rec>
        <rec key="expectedValue">%groupID%</rec>
        <rec key="successfulMsg">The group id for user '%username%' is set successfully.</rec>
      </var>

      <var set="2" lvl="2" vid="666927"
           dsc="[nxUser] Verify PasswordChangeRequired property can be updated for existing user"
           cls="DSC.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;useradd %username%</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;PasswordChangeRequired:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/shadow | grep -i '^%username%:' | tr ':' ' ' | awk '{print $3}' | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The user '%username%' is updated successfully, its password must be changed in next login</rec>
      </var>
      
    </section>

    <section sid="3" dsc="nxGroup Provider">
      
      <var set="3" lvl="1" vid="661714" dsc="[nxGroup] Verify if specific group is created if enumerated Ensure property is Present" cls="DSC.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">absent</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:Present</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The group '%groupname%' is created successfully.</rec>
        <rec key="failedMsg">The group '%groupname%' is not created.</rec>
      </var>

      <var set="3" lvl="1" vid="661715" dsc="[nxGroup] Verify if specific group is removed if enumerated Ensure property is absent" cls="DSC.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">present</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:absent</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The group '%groupname%' is removed successfully.</rec>
        <rec key="failedMsg">The group '%groupname%' is still exists.</rec>
      </var>

      <var set="3" lvl="2" vid="661716" dsc="[nxGroup] Verify if specific members are added into group if the specific members are not in group" cls="DSC.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">absent</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;Members:root,scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | grep "root,scxuser" | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The member 'root,scxuser' is added into '%groupname%'.</rec>
        <rec key="failedMsg">The member 'root,scxuser' failed to add into '%groupname%'.</rec>
      </var>

      <var set="3" lvl="2" vid="661717" dsc="[nxGroup] Verify if the members are removed from group if the members are not in specific member list" cls="DSC.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">present</rec>
        <rec key="members">root,scxuser</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;Members:root</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | grep "scxuser" | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The member 'scxuser' is removed into '%groupname%'.</rec>
        <rec key="failedMsg">The member 'scxuser' is still exist in '%groupname%'..</rec>
      </var>

      <var set="3" lvl="3" vid="661719" dsc="[nxGroup] Verify if error out if the configuration MOF have both Members property and MembersToInclude/MembersToExlude property" cls="DSC.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">absent</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;Members:;MembersToInclude:;MembersToExclude:</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">The SendConfigurationApply function did not succeed</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invalid MOF have both Members property and MembersToInclude/MembersToExlude property.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="3" lvl="3" vid="661720" dsc="[nxGroup] Verify if error out if invliad members are listed" cls="DSC.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">absent</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;Members:xxxxx</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">The SendConfigurationApply function did not succeed</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invliad members are listed.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="3" lvl="2" vid="661721" dsc="[nxGroup] Verify if the members which listed in MembersToInclude property are added into group" cls="DSC.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">absent</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;MembersToInclude:root,scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | grep "root,scxuser" | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The member 'root,scxuser' is added into '%groupname%'.</rec>
        <rec key="failedMsg">The member 'root,scxuser' failed to add into '%groupname%'.</rec>
      </var>

      <var set="3" lvl="2" vid="661722" dsc="[nxGroup] Verify if the members which listed in MembersToExclude property are removed from group" cls="DSC.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">present</rec>
        <rec key="members">root,scxuser</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;MembersToExclude:root,scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | grep "root,scxuser" | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The member 'root,scxuser' is removed from '%groupname%'.</rec>
        <rec key="failedMsg">The member 'root,scxuser' failed to remove from '%groupname%'.</rec>
      </var>
      
    </section>

    <section sid="4" dsc="nxScript Provider">
      
      <var set="4" lvl="1" vid="661705"
           dsc="[nxScript] Verify SetScript is excuted when TestScript  is excuted return false"
           cls="DSC.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">set_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="testScript">#!/bin/sh
        touch %t_path%
        exit 1</rec>
        <rec key="setScript">#!/bin/sh
        touch %s_path%</rec>
        <rec key="getScript">#!/bin/sh
        exit 0</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;t=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;echo $t$s | tr -d '\n'</rec>
        <rec key="expectedValue">11</rec>
        <rec key="successfulMsg">SetScript was executed.</rec>
        <rec key="failedMsg">SetScript was not executed.</rec>
      </var>

      <var set="4" lvl="1" vid="661706"
            dsc="[nxScript] Verify SetScript isn't excuted when TestScript  is excuted return true"
            cls="DSC.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">test_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="testScript">#!/bin/sh
        echo test > %t_path%
        exit 0
        </rec>
        <rec key="setScript">#!/bin/sh
        touch %s_path%
        exit 0
        </rec>
        <rec key="getScript">#!/bin/sh
        exit 0
        </rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">t=`cat %t_path% | tr -d '\n'`;s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;echo $t$s | tr -d '\n'</rec>
        <rec key="expectedValue">test0</rec>
        <rec key="successfulMsg">SetScript was not executed when TestScript is excuted and returns "true".</rec>
        <rec key="failedMsg">SetScript was executed when TestScript is excuted and returns "true".</rec>
      </var>

      <var set="4" lvl="2" vid="661707"
            dsc="[nxScript] Verify PowerShell gets a failed return value of 'The SendConfigurationApply function did not succeed.' when the setScript return false"
            cls="DSC.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="g_name">get_file</rec>
        <rec key="g_path">%parentPath%/%g_name%</rec>
        <rec key="testScript">#!/bin/sh
        echo Testing quotes...
        exit 1
        </rec>
        <rec key="setScript">#!/bin/sh
        echo set> %s_path%
        exit 1
        </rec>
        <rec key="getScript">#!/bin/sh
        exit 0
        </rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">The SendConfigurationApply function did not succeed</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">PowerShell gets a failure: 'The SendConfigurationApply function did not succeed.' when the setScript return false.</rec>
        <rec key="failedMsg">PowerShell doesn't get a failure: 'The SendConfigurationApply function did not succeed.' when the setScript return false</rec>
      </var>

      <var set="4" lvl="1" vid="661708"
      dsc="[nxScript] Verify GetScript is excuted when we send a get request from Powershell server"
      cls="DSC.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="g_name">get_file</rec>
        <rec key="g_path">%parentPath%/%g_name%</rec>
        <rec key="testScript">#!/bin/sh
        echo Testing quotes...
        exit 1
        </rec>
        <rec key="setScript">#!/bin/sh
        echo set> %s_path%
        exit 0
        </rec>
        <rec key="getScript">#!/bin/sh
        echo get >%g_path%
        exit 0
        </rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %g_path% | tr -d '\n'</rec>
        <rec key="expectedValue">get</rec>
        <rec key="successfulMsg">GetScript is excuted.</rec>
        <rec key="failedMsg">GetScript is not excuted.</rec>
      </var>

      <var set="4" lvl="3" vid="661709"
          dsc="[nxScript] Verify powerShell gets a failed return value when the GetScript excute fails"
          cls="DSC.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="g_name">get_file</rec>
        <rec key="g_path">%parentPath%/%g_name%</rec>
        <rec key="testScript">#!/bin/sh
        echo `"Testing quotes...`"
        exit 1
        </rec>
        <rec key="setScript">#!/bin/sh
        echo `"set 09`"> %s_path%
        exit 0
        </rec>
        <rec key="getScript">#!/bin/sh
        echo ``hostname`` >%g_path%
        exit 1
        </rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">A general error occurred, not covered by a more specific error code</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">host=`hostname`;cat %g_path%  | grep -i $host |wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">powerShell gets a failure when the GetScript excution fails</rec>
        <rec key="failedMsg">powerShell does not get a failure  when the GetScript excution fails</rec>
      </var>

      <var set="4" lvl="2" vid="661710"
           dsc="[nxScript] Verify when create/modify a file in Script with a valid user works fine"
           cls="DSC.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">test_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="user">scxuser</rec>
        <rec key="testScript">#!/bin/sh
        touch %t_path%
        exit 1
        </rec>
        <rec key="setScript">#!/bin/sh
        touch %s_path%
        </rec>
        <rec key="getScript">#!/bin/sh
        exit 0
        </rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%;User:%user%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;t=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;u=`ls -l %parentPath% | grep -i '%s_name%' | awk '{print $3}' | tr -d '\n'`;echo $t$s$u | tr -d '\n'</rec>
        <rec key="expectedValue">11%user%</rec>
        <rec key="successfulMsg">SetScript was executed by specific user.</rec>
      </var>

      <var set="4" lvl="3" vid="661711"
           dsc="[nxScript] Verify when given a invalid user, it will return a failed result stating the User is invalid"
           cls="DSC.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">test_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="user">invalidUser</rec>
        <rec key="testScript">#!/bin/sh
        touch %t_path%
        exit 1
        </rec>
        <rec key="setScript">#!/bin/sh
        touch %s_path%
        </rec>
        <rec key="getScript">#!/bin/sh
        exit 0
        </rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%;User:%user%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;t=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;echo $t$s | tr -d '\n'</rec>
        <rec key="expectedValue">00</rec>
        <rec key="successfulMsg">Error out as invalid user.</rec>
      </var>
      
      <var set="4" lvl="2" vid="661712"
           dsc="[nxScript] Verify when create/modify a file in Script with a valid user works fine"
           cls="DSC.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">set_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="group">scxuser</rec>
        <rec key="testScript">#!/bin/sh
        touch %t_path%
        exit 1
        </rec>
        <rec key="setScript">#!/bin/sh
        touch %s_path%
        </rec>
        <rec key="getScript">#!/bin/sh
        exit 0
        </rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%;Group:%group%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;t=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;g=`ls -l %parentPath% | grep -i '%s_name%' | awk '{print $4}' | tr -d '\n'`;echo $t$s$g | tr -d '\n'</rec>
        <rec key="expectedValue">11%group%</rec>
        <rec key="successfulMsg">SetScript was executed by specific group.</rec>
      </var>

      <var set="4" lvl="3" vid="661713"
           dsc="[nxScript] Verify when create/modify a file in Script with a valid user works fine"
           cls="DSC.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">set_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="group">invalidgroup</rec>
        <rec key="testScript">#!/bin/sh
        touch %t_path%
        exit 1</rec>
        <rec key="setScript">#!/bin/sh
        touch %s_path%</rec>
        <rec key="getScript">#!/bin/sh
        exit 0</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%;Group:%group%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;t=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;echo $t$s | tr -d '\n'</rec>
        <rec key="expectedValue">00</rec>
        <rec key="successfulMsg">Error out as invalid group.</rec>
      </var>
      
    </section>

    <section sid="5" dsc="nxService Provider">
      
      <!-- Init Controller. -->
      <var set="5" lvl="1" vid="661810"
           dsc="[nxService] Verify the specific service is started successfully by ‘init’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">init</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661812"
          dsc="[nxService] Verify the specific service is stopped successfully by ‘init’ service controller"
          cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">init</rec>
        <rec key="initialState">Running</rec>
        <rec key="expectedState">Stopped</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661813"
           dsc="[nxService] Verify the specific service is enabled successfully by ‘init’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">init</rec>
        <rec key="initialEnabledState">false</rec>
        <rec key="Enabled">true</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%Enabled%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%Enabled%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661814"
           dsc="[nxService] Verify the specific service is disabled successfully by ‘init’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">init</rec>
        <rec key="initialEnabledState">true</rec>
        <rec key="Enabled">false</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%Enabled%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%Enabled%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <!-- Upstart Controller. -->
      <var set="5" lvl="1" vid="661815"
           dsc="[nxService] Verify the specific service is started successfully by ‘upstart’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">upstart</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661817"
           dsc="[nxService] Verify the specific service is stopped successfully by ‘upstart’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">upstart</rec>
        <rec key="initialState">Running</rec>
        <rec key="expectedState">Stopped</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>
      
      <var set="5" lvl="1" vid="661818"
           dsc="[nxService] Verify the specific service is enabled successfully by ‘upstart’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">upstart</rec>
        <rec key="initialEnabledState">false</rec>
        <rec key="expectedEnabledState">true</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%expectedEnabledState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>
      
      <var set="5" lvl="1" vid="661819"
           dsc="[nxService] Verify the specific service is disabled successfully by ‘upstart’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">upstart</rec>
        <rec key="initialEnabledState">true</rec>
        <rec key="expectedEnabledState">false</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%expectedEnabledState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>
  
      <!-- Systemd Controller. -->
      <var set="5" lvl="1" vid="661820"
           dsc="[nxService] Verify the specific service is started successfully by ‘systemd’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">systemd</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661821"
           dsc="[nxService] Verify the specific service is stopped successfully by ‘systemd’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">systemd</rec>
        <rec key="initialState">Running</rec>
        <rec key="expectedState">Stopped</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661824"
           dsc="[nxService] Verify the specific service is enabled successfully by ‘systemd’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">systemd</rec>
        <rec key="initialEnabledState">false</rec>
        <rec key="expectedEnabledState">true</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%expectedEnabledState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="663815"
           dsc="[nxService] Verify the specific service is disabled successfully by ‘systemd’ service controller"
           cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">systemd</rec>
        <rec key="initialEnabledState">true</rec>
        <rec key="expectedEnabledState">false</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%expectedEnabledState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <!-- Negative -->
      <var set="5" lvl="3" vid="663816"
          dsc="[nxService] Verify if error out if the specific service does not exist in specific 'init' controller"
          cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%invalidServiceName%</rec>
        <rec key="controller">init</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PS throws an error as expected due to the invalid service name.</rec>
        <rec key="failedMsg">PS does not throw an error while starting an invalid service.</rec>
      </var>
      
      <var set="5" lvl="3" vid="671134"
          dsc="[nxService] Verify if error out if the specific service does not exist in specific 'upstart' controller"
          cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%invalidServiceName%</rec>
        <rec key="controller">upstart</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PS throws an error as expected due to the invalid service name.</rec>
        <rec key="failedMsg">PS does not throw an error while starting an invalid service.</rec>
      </var>

      <var set="5" lvl="3" vid="671136"
          dsc="[nxService] Verify if error out if the specific service does not exist in specific 'systemd' controller"
          cls="DSC.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%invalidServiceName%</rec>
        <rec key="controller">systemd</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%funcErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PS throws an error as expected due to the invalid service name.</rec>
        <rec key="failedMsg">PS does not throw an error while starting an invalid service.</rec>
      </var>

    </section>
    
    <section sid="6" dsc="nxEnvironment Provider">
      
      <var set="6" lvl="1" vid="661727"
           dsc="[nxEnvironment] Verify if environment variable with value is created if only specify the Name and Value property"
           cls="DSC.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/enviroment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi;if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %dscProfile%; source %dscProfile%; fi;</rec>
        <rec key="initialCmd">%cleanVar%</rec>
        <rec key="finalCmd">%cleanVar%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Present;Value=%varValue%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">checkEnv=`cat %dscProfile%| grep "%testEnvVar%" | wc -l |tr -d '\n'`; env| grep "%testEnvVar%=%varValue%" &amp;&amp; cat %etcEnv%| grep "%testEnvVar%=%varValue%";echo $?$checkEnv</rec>
        <rec key="expectedValue">00</rec>
        <rec key="successfulMsg">The environment variable is created successfully.</rec>
        <rec key="failedMsg">The environment variable is not created.</rec>
      </var>
      
      <var set="6" lvl="1" vid="661728"
           dsc="[nxEnvironment] Verify if Path environment variable with value is created if Path is 'true'"
           cls="DSC.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/enviroment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi;if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %dscProfile%; source %dscProfile%; fi;</rec>
        <rec key="initialCmd">%cleanVar%; mkdir /tmp/var_661728; echo "%varName%='/tmp/var_661728'" >>%dscProfile%; source %dscProfile%</rec>
        <rec key="finalCmd">%cleanVar%; rm -r %dscProfile%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Present;Value=%varValue%;Path:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">checkEnv=`cat %etcEnv%| grep "%testEnvVar%" | wc -l |tr -d '\n'`; env| grep "%testEnvVar%=%varValue%" &amp;&amp; cat %dscProfile%| grep "%testEnvVar%=/tmp/var_661728:%varValue%"; echo $?$checkEnv </rec>
        <rec key="expectedValue">00</rec>
        <rec key="successfulMsg">The environment variable is created successfully if Path is true.</rec>
        <rec key="failedMsg">The environment variable is not created.</rec>
      </var>
    
      <var set="6" lvl="2" vid="661729"
           dsc="[nxEnvironment] Verify if environment variable without value is created if only specify the Name property"
           cls="DSC.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/enviroment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi;if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %dscProfile%; source %dscProfile%; fi;</rec>
        <rec key="initialCmd">%cleanVar%</rec>
        <rec key="finalCmd">%cleanVar%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Present;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %etcEnv%| grep "%testEnvVar" |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The environment variable without value is created successfully.</rec>
        <rec key="failedMsg">The environment variable without value is not created.</rec>
      </var>
      
      <var set="6" lvl="1" vid="661730"
           dsc="[nxEnvironment] Verify if environment variable is removed if the Ensure is 'absent'"
           cls="DSC.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/enviroment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi;if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %dscProfile%; source %dscProfile%; fi;</rec>
        <rec key="initialCmd">%cleanVar%; echo "%varName%=%varValue% >> %etcEnv%"; source %etcEnv%"</rec>
        <rec key="finalCmd">%cleanVar%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:absent;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %etcEnv%| grep "%testEnvVar" |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The environment variable is not removed if the Ensure is 'absent' and the variable is not originally added by DSC.</rec>
        <rec key="failedMsg">The environment variable is removed successfully.</rec>
      </var>

      <var set="6" lvl="2" vid="661731"
             dsc="[nxEnvironment] Verify if Path environment variable which was added by DSC is removed when the Ensure is absent"
             cls="DSC.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="pathTmp">/tmp/path.tmp</rec>
        <rec key="initialCmd">echo $PATH > %pathTmp%</rec>
        <rec key="finalCmd">rm -f %pathTmp%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Absent;Path:True</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">old=`cat %pathTmp%`;new=`echo $PATH`; if [ $old = $new ]; then echo 0; fi;</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The PATH environment variable is not changed or removed.</rec>
      </var>

      <var set="6" lvl="3" vid="661732"
           dsc="[nxEnvironment] Verify if Path environment variable which never changed by DSC is not removed when the Ensure is absent"
           cls="DSC.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="pathTmp">/tmp/path.tmp</rec>
        <rec key="initialCmd">echo $PATH > %pathTmp%</rec>
        <rec key="finalCmd">rm -f %pathTmp%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Absent;Path:True</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">old=`cat %pathTmp%`;new=`echo $PATH`; if [ $old = $new ]; then echo 0; fi;</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The PATH environment variable is not changed or removed.</rec>
      </var>

      <var set="6" lvl="2" vid="661737"
           dsc="[nxEnvironment] Verify if environment variable is updated if the environment variable exists with value"
           cls="DSC.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="orgValue">envVarValue</rec>
        <rec key="newValue">envVarValue_new</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/enviroment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi;if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %dscProfile%; source %dscProfile%; fi;</rec>
        <rec key="initialCmd">rm -f %dscProfile%;set %varName%=%orgValue%;</rec>
        <rec key="finalCmd">%cleanVar%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Present;Value=%newValue%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">checkEnv=`cat %dscProfile%| grep "%testEnvVar%" | wc -l |tr -d '\n'`; env| grep "%testEnvVar%=%varValue%" &amp;&amp; cat %etcEnv%| grep "%testEnvVar%=%varValue%";echo $?$checkEnv</rec>
        <rec key="expectedValue">00</rec>
        <rec key="successfulMsg">The environment variable is updated successfully.</rec>
        <rec key="failedMsg">The environment variable is not updated.</rec>
      </var>

      <var set="6" lvl="3" vid="661740"
           dsc="[nxEnvironment] Verify if environment variable is updated if the environment variable exists without value"
           cls="DSC.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="orgValue">envVarValue</rec>
        <rec key="newValue">envVarValue_new</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/enviroment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi;if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %dscProfile%; source %dscProfile%; fi;</rec>
        <rec key="initialCmd">rm -f %dscProfile%;set %varName%=%orgValue%;unset %varName%;</rec>
        <rec key="finalCmd">%cleanVar%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Present;Value=%newValue%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">checkEnv=`cat %dscProfile%| grep "%testEnvVar%" | wc -l |tr -d '\n'`; env| grep "%testEnvVar%=%varValue%" &amp;&amp; cat %etcEnv%| grep "%testEnvVar%=%varValue%";echo $?$checkEnv</rec>
        <rec key="expectedValue">00</rec>
        <rec key="successfulMsg">The environment variable is updated successfully.</rec>
        <rec key="failedMsg">The environment variable is not updated.</rec>
      </var>

    </section>

  </section>
</varmap>