<?xml version="1.0" encoding="utf-8"?>
<varmap xmlns="http://smxinfranet/schemas/mcf/2002/01/varmap"
        assembly="..\DSCAzure.dll"
        dsc="DSC Azure Automation Test"
        owner="v-mifu" contact="v-mifu">

  <!-- Variables. -->
  <snippet id="Variables">
    <!-- Linux Info. -->
    <!--<rec key="nxHostName">DSC_HOST</rec>-->
    <rec key="nxHostName">dsc64-ub14-01</rec>
    <rec key="nxUsername">root</rec>
    <rec key="nxPassword">OpsMgr2007R2</rec>
    <rec key="nxPort">22</rec>
    <rec key="nxDomainName">scx.com</rec>
    <rec key="serverMode">https</rec>
    <rec key="pullServerDirectory">C:\Program Files\WindowsPowerShell\DscService\Configuration</rec>
    <rec key="forcePullpullServerCmd">/opt/omi/bin/ConsistencyInvoker</rec>
    <rec key="azureMofFileName">localhost.meta.mof</rec>

    <rec key="testServiceName">atd</rec>
    <rec key="invalidServiceName">invalidService</rec>

    <!--
                            testManagerName    packageFromSource    packageFromPath
    Debian/Ubuntu             apt                 nano              testpackage3
    SLES                      zypper              nano              testpackage3-1.0-1
    Centos, Oracle, Rhel      yum                 nano              testpackage3-1.0-1.noarch, testpackage3-1.0-1(Centos5x86, ora5x64)
    -->
    <rec key="testManagerName">PACKAGE_MANAGER</rec>
    <rec key="packageFromPath">PACKAGE_NAME</rec>
    <rec key="packageFilePath">/tmp/testpackage3_1.0</rec>
    <rec key="packageFromSource">nano</rec>
    
    <rec key="remoteTarFilePath">http://dsc64-apache-01.scx.com/source.tar</rec>
    
    
    <!-- DSC Info. -->
    <rec key="dscHome">/opt</rec>
    <rec key="omiHome">%dscHome%/omi</rec>
    <rec key="omiserverHome">%omiHome%/bin/omiserver</rec>
    <rec key="dscLog">/tmp/dsc_out.log</rec>
    <rec key="loadErrorMsg">Loading the instance document from the pending location did not succeed</rec>
    <rec key="funcErrorMsg">The SendConfigurationApply function did not succeed</rec>
    <rec key="configErrorMsg">Failed to apply the configuration.</rec>
    <rec key="PermisssionErrorMsg">Access to a CIM resource is not available to the client</rec>

    <!-- Script Info. -->
    <rec key="scriptLocation">C:\Temp</rec>
    <rec key="mofPath">%scriptLocation%</rec>
    <rec key="configFilePath">%scriptLocation%\DscMetaConfigs</rec>
    <rec key="configMofScriptPath">%scriptLocation%\dsc_AzureTest.ps1</rec>
    <rec key="configAzure">
      Import-Module azure
      Switch-AzureMode -Name AzureResourceManager
      Select-AzureSubscription -SubscriptionName "Internal Consumption"
      $RGName = "OaaSCSVNOET5OD5VF3OJLWHSHLF7AY73M2LVIGDDRO73D4OD2YLFLYXQCA-East-US"
      $AA = "OSTCAA"
      $ResourceGroup = Get-AzureResourceGroup -Name:$RGName
      $Acct = $ResourceGroup | Get-AzureAutomationAccount -Name:$AA
      $Acct | Get-AzureAutomationDscOnboardingMetaconfig -OutputFolder:"C:\temp\"  -Force
    </rec>

    <rec key="dscSender">
      [void] (winrm set winrm/config/client '@{TrustedHosts="*"}');
      $securePass = ConvertTo-SecureString -string "%nxPassword%" -AsPlainText -Force;
      $cred= New-Object System.Management.Automation.PSCredential "%nxUsername%", $SecurePass;
      $opt = New-CimSessionOption -UseSsl:$true -SkipCACheck:$true -SkipCNCheck:$true -SkipRevocationCheck:$true;
      $demo1=New-CimSession -Credential:$cred -ComputerName:%nxHostName%.%nxDomainName% -Port:5986 -Authentication:basic -SessionOption:$opt;
      Set-DSCLocalConfigurationManager -CimSession:$demo1 -Path %configFilePath% -Verbose 
     </rec>
    
    <rec key="getNodeIdCmd">
      Import-Module azure
      Switch-AzureMode AzureResourceManager
      $RGName = "OaaSCSVNOET5OD5VF3OJLWHSHLF7AY73M2LVIGDDRO73D4OD2YLFLYXQCA-East-US"
      $AA = "OSTCAA"
      $Acct = Get-AzureAutomationAccount -ResourceGroupName:$RGName -Name:$AA
      ($Acct | Get-AzureAutomationDSCNode -Name:%nxHostName%).Id
    </rec>
    
    <rec key="importConfigToAzure">
      Import-Module azure
      Switch-AzureMode AzureResourceManager
      $RGName = "OaaSCSVNOET5OD5VF3OJLWHSHLF7AY73M2LVIGDDRO73D4OD2YLFLYXQCA-East-US"
      $AA = "OSTCAA"
      $Acct = Get-AzureAutomationAccount -ResourceGroupName:$RGName -Name:$AA
      $Acct | Get-AzureAutomationDSCConfiguration  
      $Acct | Import-AzureAutomationDscConfiguration -SourcePath '%configMofScriptPath%' -Description "Test File" -Published -force
      $myConfig = $Acct | Get-AzureAutomationDSCConfiguration -ConfigurationName:"dsc_AzureTest"
      $myCompileJob = $myConfig | Start-AzureAutomationDscCompilationJob
      $myCompileJob | Get-AzureAutomationDscCompilationJob -ConfigurationName:"dsc_AzureTest"
      Start-Sleep 60
      $Acct | Set-AzureAutomationDscNode -NodeConfigurationName "dsc_AzureTest.%nxHostName%.%nxDomainName%" -id "$nodeID"
    </rec>
    
    <rec key="removeNode">
      Import-Module azure
      Switch-AzureMode AzureResourceManager
      $RGName = "OaaSCSVNOET5OD5VF3OJLWHSHLF7AY73M2LVIGDDRO73D4OD2YLFLYXQCA-East-US"
      $AA = "OSTCAA"
      $Acct = Get-AzureAutomationAccount -ResourceGroupName:$RGName -Name:$AA
      $Acct | Unregister-AzureAutomationDscNode -Id $nodeID -Force
    </rec>
    
    <!-- Ssh Commands.-->
    <rec key="getPid">ps -ef | grep omiserver | grep -v grep | awk '{print $2}' | tr -d '\n'</rec>
    <rec key="kill">kill -9 </rec>
    <rec key="startOMI">%omiserverHome% &amp;&gt;%dscLog%&amp;</rec>
    <rec key="exportDSCPath">export OMI_HOME=%omiHome%</rec>
  </snippet>

  <!-- All Test Cases. -->
  <section dsc="All tests" cls="DSCAzure.GroupHelper">
    <snipref id="Variables"/>
    <section sid="1" dsc="nxFile Provider">

      <var set="1" lvl="1" vid="661642"
           dsc="[nxFile] Verify if specific destination file is created if the file doesn't exist before and enumerated Ensure property is Present"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-'|awk '$NF=="%name%"{print $NF}' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination file '%name%' is created under %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination file '%path%' is not created under %parentPath%.</rec>
      </var>

      <var set="1" lvl="1" vid="661643"
           dsc="[nxFile] Verify if specific destination file is removed if the file exists before and enumerated Ensure property is Absent"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Absent;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | awk '$NF=="%name%"{print $NF}' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination file '%name%' is deleted successfully.</rec>
        <rec key="failedMsg">The destination file '%path%' is not deleted.</rec>
      </var>

      <var set="1" lvl="1" vid="661649"
           dsc="[nxFile] Verify if specific destination folder is created if the folder doesn't exist before and enumerated Ensure property is Present"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Directory;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^d' | awk '$NF=="%name%"{print $NF}'| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination folder '%name%' is created successfully.</rec>
        <rec key="failedMsg">The destination folder '%path%' is not created.</rec>
      </var>

      <var set="1" lvl="1" vid="661650"
           dsc="[nxFile] Verify if specific destination folder is removed if the folder exists before enumerated Ensure property is Absent"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;mkdir %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Absent;Type:Directory;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | awk '$NF=="%name%"{print $NF}' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination folder '%name%' is removed successfully.</rec>
        <rec key="failedMsg">The destination folder '%path%' is not removed.</rec>
      </var>

      <var set="1" lvl="2" vid="661652"
           dsc="[nxFile] Verify if specific path has multiple levels is created successfully"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%/a/b/c;Ensure:Present;Type:Directory</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %path%/a/b | grep '^d' | grep -i 'c$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination file '%path%/a/b/c' is created successfully.</rec>
        <rec key="failedMsg">The destination folder '%path%/a/b/c' is not created.</rec>
      </var>

      <var set="1" lvl="2" vid="661653"
           dsc="[nxFile] Verify if specific non-empty directory is removed successfully when Ensure is Absent"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;mkdir %path%;mkdir %path%/a;mkdir %path%/a/b;mkdir %path%/a/b/c</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Absent;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | awk '$NF=="%name%"{print $NF}' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination file '%path%' is removed successfully.</rec>
        <rec key="failedMsg">The destination folder '%path%' is not removed.</rec>
      </var>

      <var set="1" lvl="2" vid="661654"
           dsc="[nxFile] Verify if specific contents are filled into empty file successfully"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Contents:This is a test file!</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%| tr -d '\n'</rec>
        <rec key="expectedValue">This is a test file!</rec>
        <rec key="successfulMsg">The specific contents 'This is a test file!' is in file %path%. Successfully.</rec>
        <rec key="failedMsg">The specific contents 'This is a test file!' isn't in file %path%. Failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661655"
           dsc="[nxFile] Verify if specific file updates the contents successfully"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%;echo "Hello World" >> %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Contents:This is a test file! -- updated</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path% | grep updated | tr -d '\n'</rec>
        <rec key="expectedValue">This is a test file! -- updated</rec>
        <rec key="successfulMsg">The specific contents 'This is a test file!-- updated' Successfully updated in file %path%.</rec>
        <rec key="failedMsg">The specific contents 'This is a test file!-- updated' failed updated in file %path%. Failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661656"
           dsc="[nxFile] Verify if mode is set properly when the value of the specific mode is a 3 charater integer"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Mode:777</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">stat --format '%a' %path% | tr -d '\n'</rec>
        <rec key="expectedValue">777</rec>
        <rec key="successfulMsg">The specific mode of file %path% successfully set to 777.</rec>
        <rec key="failedMsg">Set the specific mode of file %path% to 777 failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661657"
           dsc="[nxFile] Verify if mode is set properly when the value of the specific mode is a 3 charater integer"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path% ; touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Mode:rwxrwxrwx</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">stat --format '%A' %path% | tr -d '\n'</rec>
        <rec key="expectedValue">-rwxrwxrwx</rec>
        <rec key="successfulMsg">The specific mode of file %path% successfully set to 777.</rec>
        <rec key="failedMsg">Set the specific mode of file %path% to 777 failed.</rec>
      </var>

      <var set="1" lvl="3" vid="661658"
           dsc="[nxFile] Verify if error out when the value of the specific mode is invalid"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Mode:abcabacas</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invalid Mode.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="1" lvl="2" vid="661659"
           dsc="[nxFile] Verify if Group property of file is set as correct as specified"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Group:scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cd %parentPath%;ls -al | grep %name% | awk '{print $4}'| tr -d '\n'</rec>
        <rec key="expectedValue">scxuser</rec>
        <rec key="successfulMsg">The Group property of file %path% successfully set to scxuser.</rec>
        <rec key="failedMsg">The Group property of file %path% failed set to scxuser.</rec>
      </var>

      <var set="1" lvl="3" vid="661660"
           dsc="[nxFile] Verify if error out if the specific Group account doesn't exist on DSC server"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialType">file</rec>
        <rec key="initialState">present</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Group:abcdc</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invalid group.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="1" lvl="2" vid="661661"
           dsc="[nxFile] Verify if Owner property of file is set as correct as specified"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Owner:scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cd %parentPath%;ls -al | grep %name% | awk '{print $3}'| tr -d '\n'</rec>
        <rec key="expectedValue">scxuser</rec>
        <rec key="successfulMsg">The Owner property of file %path% successfully set to scxuser.</rec>
        <rec key="failedMsg">The Owner property of file %path% failed set to scxuser.</rec>
      </var>

      <var set="1" lvl="2" vid="661662"
           dsc="[nxFile] Verify if error out if the specific Owner account doesn't exist on DSC server"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_jeffrey</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Owner:abas</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invalid Owner.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="1" lvl="2" vid="661663"
           dsc="[nxFile] Verify if destination path is created as well as source path, included all subdirectories if specific Recurse is true"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_folder">subfolder</rec>
        <rec key="s_file">file</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;mkdir %s_path%/%s_folder%;touch %s_path%/%s_file%;touch %s_path%/%s_folder%/%s_file%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">null=`diff -r %s_path% %path%`;echo $?  | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%' successfully.</rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661664"
           dsc="[nxFile] Verify if destination path is created as well as source path, not included any subdirectories if specific Recurse is false"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_folder">subfolder</rec>
        <rec key="s_file">file</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;mkdir %s_path%/%s_folder%;touch %s_path%/%s_file%;touch %s_path%/%s_folder%/%s_file%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:false;Type:Directory</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">t=`ls -l %parentPath% | grep '^d' | grep -i ' %name%$' | wc -l | tr -d '\n'`;s=`ls %path% | wc -l | tr -d '\n'`;echo $t$s  | tr -d '\n'</rec>
        <rec key="expectedValue">11</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%' successfully.</rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661665"
           dsc="[nxFile] Verify if the taget of the symbolic link is copied if specific Links property is Follow"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_link">link</rec>
        <rec key="target">target</rec>
        <rec key="t_path">%parentPath%/%target%</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;touch %t_path%;mkdir %s_path%;cd %s_path%;ln -s %t_path% %s_link%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;rm -rf %t_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Type:Directory;Links:Follow;Recurse:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">d_md5=`md5sum %path%/%s_link% | awk '{print $1}' | tr -d '\n'`;t_md5=`md5sum %t_path% | awk '{print $1}' | tr -d '\n'`;if [ &quot;$d_md5&quot; = &quot;$t_md5&quot; ]; then echo '1'; else echo '0'; fi  | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The taget of the symbolic link is copied .</rec>
        <rec key="failedMsg">The taget of the symbolic link is not copied.</rec>
      </var>

      <var set="1" lvl="2" vid="661667"
           dsc="[nxFile] Verify if the link itself is copied if specific Links property is Manage"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_link">link</rec>
        <rec key="target">target</rec>
        <rec key="t_path">%parentPath%/%target%</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;touch %t_path%;mkdir %s_path%;cd %s_path%;ln -s %t_path% %s_link%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;rm -rf %t_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Type:Directory;Links:Manage;Recurse:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">d_md5=`md5sum %path%/%s_link% | awk '{print $1}' | tr -d '\n'`;s_md5=`md5sum %s_path%/%s_link% | awk '{print $1}' | tr -d '\n'`;if [ &quot;$d_md5&quot; = &quot;$s_md5&quot; ]; then echo '1'; else echo '0'; fi  | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The link itself is copied.</rec>
        <rec key="failedMsg">The link itself is not copied.</rec>
      </var>

      <var set="1" lvl="2" vid="661668"
           dsc="[nxFile] Verify if the symbolic links are ignored if the specific Links property is ignore"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_link">link</rec>
        <rec key="target">target</rec>
        <rec key="t_path">%parentPath%/%target%</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;touch %t_path%;mkdir %s_path%;cd %s_path%;ln -s %t_path% %s_link%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;rm -rf %t_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Type:Directory;Links:Ignore;Recurse:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">t=`ls %path% | grep -i '%target%$' | wc -l | tr -d '\n'`;s=`ls %path% | grep -i '%s_link%$' | wc -l | tr -d '\n'`;echo $t$s | tr -d '\n'</rec>
        <rec key="expectedValue">00</rec>
        <rec key="successfulMsg">The link itself is copied.</rec>
        <rec key="failedMsg">The link itself is not copied.</rec>
      </var>

      <var set="1" lvl="2" vid="661671"
           dsc="[nxFile] Verify if file is created properly if the depended resource configuration run firstly"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="owner">temp_test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">rm -rf %path%;</rec>
        <rec key="finalCmd">rm -rf %path%;userdel -f -r %owner%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Owner:%owner%;DependsOn:[nxUser]user;Password:%password%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | awk '$NF=="%name%"{printf $NF$3}'</rec>
        <rec key="expectedValue">%name%%owner%</rec>
        <rec key="successfulMsg">The file is created by depended new user.</rec>
        <rec key="failedMsg">The file is not created.</rec>
      </var>

      <var set="1" lvl="2" vid="661672"
           dsc="[nxFile] Verify if the specific directory which has the same name with existing file is created if configured Force property is true"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialType">file</rec>
        <rec key="initialState">absent</rec>
        <rec key="initialCmd">rm -rf %path%; touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Directory;Force:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^d' | grep -i '%name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination folder '%name%' is created under %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination folder '%path%' is not created under %parentPath%.</rec>
      </var>

      <var set="1" lvl="2" vid="661674"
           dsc="[nxFile] Verify if the destination path is copied from source path successfully if file of the same name exists and the configured Force property is true"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_folder">subfolder</rec>
        <rec key="s_file">file</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%;rm -rf %s_path%;mkdir %s_path%;mkdir %s_path%/%s_folder%;touch %s_path%/%s_file%;touch %s_path%/%s_folder%/%s_file%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Force:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">null=`diff -r %s_path% %path%`;echo $?  | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%' successfully.</rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>

      <var set="1" lvl="2" vid="661675"
            dsc="[nxFile] Verify if the specific file which has the same name with existing folder is created if configured Force property is true"
            cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_661675</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;mkdir %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File;Force:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | grep -i '%name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination file "path" which has the same name with a existing foler is created successfully, if the Force property is set to "true" .</rec>
        <rec key="failedMsg">The destination file "path" which has the same name with a existing foler is not created, though the Force property has been set to "true".</rec>
      </var>

      <var set="1" lvl="3" vid="661676"
            dsc="[nxFile] Verify if error out without Force property when the specific file which has the same name with existing folder"
            cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_661676</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;mkdir %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:File</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <!--rec key="successfulMsg">PowerShell error as the same name folder existing.</rec-->
        <!--rec key="failedMsg">PowerShell should error out but it succeeds!</rec-->
      </var>

      <var set="1" lvl="3" vid="661677"
            dsc="[nxFile] Verify if error out when the specific directory which has the same name with existing file is created and configured Force property is false"
            cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test_661677</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="initialCmd">rm -rf %path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Directory;Force:false</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <!--rec key="successfulMsg">PowerShell error as the same name file existing.</rec-->
        <!--rec key="failedMsg">PowerShell should error out but it succeeds!</rec-->
      </var>

      <var set="1" lvl="2" vid="661678"
           dsc="[nxFile] Verify if destination file is updated if the configured Checksum is ctime and the source is newer than destination file"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="content">mtime is newer but ctime is ealier</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">mtime is ealier but ctime is newer</rec>
        <!-- The source's mtime is earlier but ctime is later. -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;echo '%s_content%' &gt; %s_path%/%s_file%; sleep 1;echo '%content%' &gt; %path%/%s_file%;sleep 1;chmod a+x %s_path%/%s_file%</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Checksum:ctime</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%/%s_file% | tr -d '\n'</rec>
        <rec key="expectedValue">%s_content%</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%' successfully.</rec>
        <rec key="failedMsg">Didn't update.</rec>
      </var>

      <var set="1" lvl="3" vid="661679"
           dsc="[nxFile] Verify if destination file is not changed if the configured Checksum is ctime and the source is older than destination file"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="content">Init Content: mtime is ealier but ctime is newer</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">Source Content: mtime is newer but ctime is ealier</rec>
        <!-- The source's mtime is later but ctime is earlier. -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;echo '%s_content%' &gt; %s_path%/%s_file%; sleep 1;echo '%content%' &gt; %path%/%s_file%;sleep 1;chmod a+x %path%/%s_file%</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%/%s_file%;SourcePath:%s_path%/%s_file%;Ensure:Present;Checksum:ctime</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%/%s_file% | tr -d '\n'</rec>
        <rec key="expectedValue">%s_content%</rec>
        <rec key="successfulMsg">The destination path didn't update as its ctime is newer.</rec>
        <rec key="failedMsg">The ctime of destination is newer but it was updated.</rec>
      </var>

      <var set="1" lvl="2" vid="661680"
           dsc="[nxFile] Verify if destination file is updated if the configured Checksum is mtime and the source is newer than destination file"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="content">Init Content: mtime is ealier but ctime is newer</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">Source Content: mtime is newer but ctime is ealier</rec>
        <!-- The source's mtime is later but ctime is earlier. -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;echo '%content%' &gt; %path%/%s_file%;sleep 1;echo '%s_content%'  &gt; %s_path%/%s_file%; sleep 1;chmod a+x %path%/%s_file%</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Checksum:mtime</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%/%s_file%  | tr -d '\n'</rec>
        <rec key="expectedValue">%s_content%</rec>
        <rec key="successfulMsg">The destination is updated as its mtime is earlier.</rec>
        <rec key="failedMsg">The mtime of destination is earlier but it was not updated.</rec>
      </var>

      <var set="1" lvl="3" vid="661681"
           dsc="[nxFile] Verify if destination file is not updated if the configured Checksum is mtime and the source is older than destination file"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="content">mtime is newer but ctime is ealier</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">mtime is ealier but ctime is newer</rec>
        <!-- The source's mtime is earlier but ctime is later. -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;echo '%s_content%'  &gt; %s_path%/%s_file%; sleep 1;echo '%content%'  &gt; %path%/%s_file%;</rec>
        <!--sleep 1;chmod a+x %s_path%/%s_file%-->
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Checksum:mtime</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%/%s_file%  | tr -d '\n'</rec>
        <rec key="expectedValue">%s_content%</rec>
        <rec key="successfulMsg">The destination is not updated as its mtime is newer.</rec>
        <rec key="failedMsg">The mtime of destination is newer but it was updated.</rec>
      </var>

      <var set="1" lvl="2" vid="661682"
           dsc="[nxFile] Verify if destination file is updated if the configured Checksum is md5 and the source is other than destination file"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">md5 is changed.</rec>
        <!-- The source's md5 value is changed. -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;echo '%s_content%'  &gt; %s_path%/%s_file%;</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Checksum:md5</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %path%/%s_file% | tr -d '\n'</rec>
        <rec key="expectedValue">%s_content%</rec>
        <rec key="successfulMsg">The destination is updated as its md5 value is different than source.</rec>
        <rec key="failedMsg">The md5 value of destination is different than source but it wasn't updated.</rec>
      </var>

      <var set="1" lvl="3" vid="661683"
           dsc="[nxFile] Verify if destination file is updated if the configured Checksum is md5 and the source is other than destination file"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="s_file">file</rec>
        <rec key="s_content">md5 is changed.</rec>
        <rec key="destinationPathProperty">/tmp/dp.prop</rec>
        <!-- The md5 value is the same, but the ctime is different . -->
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %s_path%/%s_file%;mkdir %path%;cp %s_path%/%s_file% %path%;sleep 1;chmod guoa+rwx %path%;f=`ls -lc %path% | tr -d '\n'`;echo $f  &gt; %destinationPathProperty%</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;SourcePath:%s_path%;Ensure:Present;Recurse:true;Type:Directory;Checksum:md5</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">org=`cat %destinationPathProperty%`;f=`ls -lc %path% | tr -d '\n'`;echo $f  &gt; %destinationPathProperty%;new=`cat %destinationPathProperty%`;if [ &quot;$org&quot; = &quot;$new&quot; ]; then echo '1'; else echo '0'; fi | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination is not updated as its md5 value is the same as source.</rec>
        <rec key="failedMsg">The md5 value of destination is the same as source but it was updated.</rec>
      </var>

      <var set="1" lvl="2" vid="668030"
           dsc="[nxFile] Verify if specific destination link is created and linked to the specific SourcePath"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%</rec>
        <rec key="finalCmd">rm -rf %path%; rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Link;SourcePath:%s_path%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^l' | grep -i '%name% -> %s_path%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination link '%name%' linked to '%s_path%' is created under %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination link '%path%' is not created under %parentPath%.</rec>
      </var>

      <var set="1" lvl="2" vid="668041"
           dsc="[nxFile] Verify if specific destination link is removed if the link exists before and the Ensure is Absent"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;ln -s %s_path% %path%</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Absent;Type:Link</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^l' | grep -i '%name% -> %s_path%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The destination link '%path%' linked to '%s_path%' is removed from %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination link '%name%' is not removed from %parentPath%.</rec>
      </var>

      <var set="1" lvl="2" vid="668048"
           dsc="[nxFile] Verify if specific destination link whose path does exists as other type is created if the Force is true"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;mkdir %path%</rec>
        <rec key="finalCmd">rm -rf %path%; rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Link;SourcePath:%s_path%;Force:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^l' | grep -i '%name% -> %s_path%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination link '%name%' linked to '%s_path%' is created under %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination link '%path%' is not created under %parentPath%.</rec>
      </var>

      <var set="1" lvl="2" vid="668054"
           dsc="[nxFile] Verify if specific destination link is updated successfully if the link exists before"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;ln -s /tmp %path%</rec>
        <rec key="finalCmd">rm -rf %path%; rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Link;SourcePath:%s_path%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^l' | grep -i '%name% -> %s_path%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination link '%name%' is updated to link to '%s_path%'  under %parentPath% successfully.</rec>
        <rec key="failedMsg">The destination link '%path%' is not updated under %parentPath%.</rec>
      </var>

      <var set="1" lvl="3" vid="668059"
           dsc="[nxFile] Verify if error out if the specific destination link whose path does exists as other type and the specific Force is false"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%;touch %path%</rec>
        <rec key="finalCmd">rm -rf %path%; rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Link;SourcePath:%s_path%;Force:false</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
      </var>

      <var set="1" lvl="2" vid="668094"
           dsc="[nxFile] Verify if error out when try to create a link but there is no SourcePath property in the configuration MOF"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">/s_tmp</rec>
        <rec key="initialCmd">rm -rf %path%;rm -rf %s_path%;mkdir %s_path%</rec>
        <rec key="finalCmd">rm -rf %path%;rm -rf %s_path%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%path%;Ensure:Present;Type:Link</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^l' | grep -i '%name% -> %s_path%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
      </var>
      
      <var set="1" lvl="2" vid="845705"
           dsc="[nxFile] Verify if specific destination file is copied from remote source by http when Ensure property is Present"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">http://dsc64-apache-01.scx.com</rec>
        <!--rec key="s_folder">subfolder</rec-->
        <rec key="s_file">test</rec>
        <rec key="initialCmd">export http_proxy=;export https_proxy=;rm -rf %parentPath%/%name%;</rec>
        <rec key="finalCmd">rm -rf %parentPath%/%name%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%parentPath%/%name%;SourcePath:%s_path%/%s_file%;Ensure:Present;Type:File</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-'|awk '$NF=="%name%"{print $NF}' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%' successfully.</rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>

      <var set="1" lvl="2" vid="845729"
           dsc="[nxFile] Verify if specific destination file is copied from remote source by https when Ensure property is Present"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">https://dsc64-apache-01.scx.com</rec>
        <!--rec key="s_folder">subfolder</rec-->
        <rec key="s_file">test</rec>
        <rec key="initialCmd">export http_proxy=;export https_proxy=;rm -rf %parentPath%/%name%;</rec>
        <rec key="finalCmd">rm -rf %parentPath%/%name%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%parentPath%/%name%;SourcePath:%s_path%/%s_file%;Ensure:Present;Type:File</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-'|awk '$NF=="%name%"{print $NF}' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%' successfully.</rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>

      <var set="1" lvl="2" vid="845763"
           dsc="[nxFile] Verify if specific destination file is copied from remote source by ftp when Ensure property is Present"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">ftp://dsc64-apache-01.scx.com</rec>
        <rec key="s_folder">pub</rec>
        <rec key="s_file">test</rec>
        <rec key="initialCmd">rm -rf %parentPath%/%name%;</rec>
        <rec key="finalCmd">rm -rf %parentPath%/%name%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%parentPath%/%name%;SourcePath:%s_path%/%s_folder%/%s_file%;Ensure:Present;Type:File</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-'|awk '$NF=="%name%"{print $NF}' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The destination folder '%path%' is copied from '%s_path%/%s_folder%' successfully.</rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>

      <var set="1" lvl="3" vid="845821"
           dsc="[nxFile] Verify if error out when get remote source by http if the apache server is stopped"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">http://test-apache-01.scx.com</rec>
        <!--rec key="s_folder">subfolder</rec-->
        <rec key="s_file">test</rec>
        <rec key="initialCmd">export http_proxy=;export https_proxy=;rm -rf %parentPath%/%name%;</rec>
        <rec key="finalCmd">rm -rf %parentPath%/%name%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%parentPath%/%name%;SourcePath:%s_path%/%s_file%;Ensure:Present;Type:File</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error expected as apache server is not running.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>
      
      <var set="1" lvl="3" vid="845822"
           dsc="[nxFile] Verify if error out when get remote source by https if the apache server is stopped"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">https://test-apache-01.scx.com</rec>
        <!--rec key="s_folder">subfolder</rec-->
        <rec key="s_file">test</rec>
        <rec key="initialCmd">export http_proxy=;export https_proxy=;rm -rf %parentPath%/%name%;</rec>
        <rec key="finalCmd">rm -rf %parentPath%/%name%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%parentPath%/%name%;SourcePath:%s_path%/%s_file%;Ensure:Present;Type:File</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error expected as apache server is not running.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="1" lvl="3" vid="845823"
           dsc="[nxFile] Verify if error out when get remote source by ftp if the apt server is stopped"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">ftp://test-apache-01.scx.com</rec>
        <rec key="s_folder">pub</rec>
        <rec key="s_file">test</rec>
        <rec key="initialCmd">export http_proxy=;export https_proxy=;rm -rf %parentPath%/%name%;</rec>
        <rec key="finalCmd">rm -rf %parentPath%/%name%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%parentPath%/%name%;SourcePath:%s_path%/%s_folder%/%s_file%;Ensure:Present;Type:File</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error expected as ftp server is not running.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="1" lvl="3" vid="845828"
           dsc="[nxFile] Verify if error out when get remote source by http if the source file don't exist"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">http://dsc64-apache-01.scx.com</rec>
        <!--rec key="s_folder">pub</rec-->
        <rec key="s_file">notexistedfile</rec>
        <rec key="initialCmd">export http_proxy=;export https_proxy=;rm -rf %parentPath%/%name%;</rec>
        <rec key="finalCmd">rm -rf %parentPath%/%name%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%parentPath%/%name%;SourcePath:%s_path%/%s_file%;Ensure:Present;Type:File</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error expected as ftp server is not running.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="1" lvl="3" vid="845833"
           dsc="[nxFile] Verify if error out when get remote source by ftp if the source file don't exist"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">test</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">ftp://dsc64-apache-01.scx.com</rec>
        <rec key="s_folder">pub</rec>
        <rec key="s_file">notexistedfile</rec>
        <rec key="initialCmd">export http_proxy=;export https_proxy=;rm -rf %parentPath%/%name%;</rec>
        <rec key="finalCmd">rm -rf %parentPath%/%name%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%parentPath%/%name%;SourcePath:%s_path%/%s_folder%/%s_file%;Ensure:Present;Type:File</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error expected as ftp server is not running.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>
      
      <var set="1" lvl="2" vid="845844"
           dsc="[nxFile] Verify if folder is copied from remote source by http , included all subdirectories if specific Recurse is true"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">testfold</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">http://dsc64-apache-01.scx.com</rec>
        <!--rec key="s_folder">subfolder</rec-->
        <rec key="s_file">testfold</rec>
        <rec key="initialCmd">export http_proxy=;export https_proxy=;rm -rf %parentPath%/%name%;</rec>
        <rec key="finalCmd">rm -rf %parentPath%/%name%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%parentPath%/%name%;SourcePath:%s_path%/%s_file%;Ensure:Present;Type:Directory;Recurse:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">The remote http path is only valid for File type </rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>  

      <var set="1" lvl="2" vid="845845"
           dsc="[nxFile] Verify if folder is copied from remote source by ftp , included all subdirectories if specific Recurse is true"
           cls="DSCAzure.nxFileTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="name">testfold</rec>
        <rec key="path">%parentPath%/%name%</rec>
        <rec key="s_path">ftp://dsc64-apache-01.scx.com</rec>
        <rec key="s_folder">pub</rec>
        <rec key="s_file">testfold</rec>
        <rec key="initialCmd">rm -rf %parentPath%/%name%;</rec>
        <rec key="finalCmd">rm -rf %parentPath%/%name%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">DestinationPath:%parentPath%/%name%;SourcePath:%s_path%/%s_folder%/%s_file%;Ensure:Present;Type:Directory;Recurse:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">The remote ftp path is only valid for File type.</rec>
        <rec key="failedMsg">Copied failed.</rec>
      </var>
             
             
    </section>

    <section sid="2" dsc="nxUser Provider">
      <var set="2" lvl="1" vid="661686"
           dsc="[nxUser] Verify a new user is created when provide a new userName and set Ensure to Present"
           cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The user '%username%' is created successfully.</rec>
        <rec key="failedMsg">The user '%username%' is not created.</rec>
      </var>

      <var set="2" lvl="1" vid="661688" dsc="[nxUser] Verify an existing user is deleted when provide an existing userName and set Ensure to absent" cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661688</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username%; cat /etc/passwd|grep -i "^%username%"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Absent;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The user '%username%' is deleted successfully.</rec>
        <rec key="failedMsg">The user '%username%' is not deleted.</rec>
      </var>

      <var set="2" lvl="2" vid="661689" dsc="[nxUser] Verify the full name is added to the user information on the target node" cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661689</rec>
        <rec key="fullName">%username%_full</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username%; cat /etc/passwd|grep -i "^%username%"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | grep -i "%fullName%"| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The full name "%fullName%" is added to the user information.</rec>
        <rec key="failedMsg">The full name "%fullName%" is not added to the user information.</rec>
      </var>

      <var set="2" lvl="3" vid="661690" dsc="[nxUser] Verify the  Full Name property can be modified" cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661690</rec>
        <rec key="fullName">Test Hot</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username% -c %username%_full; cat /etc/passwd|grep -i "^%username%"|grep -i "%username%_full"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | grep -i "Test Hot"| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The full name is changed to "%fullName%".</rec>
        <rec key="failedMsg">The full name is not changed to "%fullName%".</rec>
      </var>

      <var set="2" lvl="2" vid="661691" dsc="[nxUser] Verify the Description is added to the User information on the target node" cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661691</rec>
        <rec key="fullName">Test Hot</rec>
        <rec key="description">GoodUser</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username% -c "Test Hot"; cat /etc/passwd|grep -i "^%username%"|grep -i "Test Hot"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%;Description:%description%;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%' | grep -i "%fullName%,%description%"| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The description is added to the user information.</rec>
        <rec key="failedMsg">The description is not added to the user information.</rec>
      </var>

      <var set="2" lvl="3" vid="661692" dsc="[nxUser] Verify the Description can be modified" cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661692</rec>
        <rec key="fullName">Tester Cool</rec>
        <rec key="description">GoodUser!</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username% -c "Tester Cool,this is the description for this user"; cat /etc/passwd|grep -i "^%username%"|grep -i "Tester Cool,this is the description for this user"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%;Description:%description%;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | grep -i "%fullName%,%description%"| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The description is changed to "%description%".</rec>
        <rec key="failedMsg">The description is not changed to "%description%".</rec>
      </var>

      <var set="2" lvl="2" vid="661693" dsc="[nxUser] Verify the PassWord can be added and provided as a salted SHA1 Hash, the User can be loged on with it when the Disabled is set to false." cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661693</rec>
        <rec key="fullName">Tester Cool</rec>
        <rec key="description">BadUser!</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username%; cat /etc/passwd|grep -i "^%username%"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%;Description:%BadUser%;Password:%password%;Disabled:false</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/shadow | grep -i '^%username%:' | tr ':'  ' ' | awk '{print $2}' | grep '^!' | wc -l | tr -d '\n'| wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The password is added and provided as a salted SHA1 Hash, the user can login with it when the Disabled is set to false.</rec>
        <rec key="failedMsg">The password is added and provided as a salted SHA1 Hash, but the user can not login with it when the Disabled is set to false.</rec>
      </var>

      <var set="2" lvl="2" vid="661694" dsc="[nxUser] Verify the PassWord can be added and provided as a salted SHA1 Hash, the User can't be loged on with it when the Disabled is set to true" cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user_661694</rec>
        <rec key="fullName">Tester Cool</rec>
        <rec key="description">BadUser!</rec>
        <rec key="password">abcde</rec>
        <rec key="initialCmd">userdel -rf %username%;groupdel %username%;useradd -m %username%; cat /etc/passwd|grep -i "^%username%"; if [ $? -ne 0 ];then exit 1;fi;</rec>
        <rec key="finalCmd">userdel -rf %username%;</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;FullName:%fullName%;Description:%description%;Password:%password%;Disabled:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/shadow | grep -i '^%username%:' | tr ':'  ' ' | awk '{print $2}' | grep '^!' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The password is added and provided as a salted SHA1 Hash, the user can not login with it when the Disabled is set to true.</rec>
        <rec key="failedMsg">The password is not added as a salted SHA1 Hash, or the user can login with the latest password even the Disabled is set to true </rec>
      </var>

      <var set="2" lvl="2" vid="661695"
           dsc="[nxUser] Verify the User will be required to enter a new password on the next log on when set the PasswordChangeRequired to true"
           cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;PasswordChangeRequired:true;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/shadow | grep -i '^%username%:' | tr ':' ' ' | awk '{print $3}' | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The user '%username%' is created successfully, its password must be changed in next login</rec>
      </var>

      <var set="2" lvl="2" vid="661696"
           dsc="[nxUser] Verify the User won't be required to enter a new password on the next log on when set the PasswordChangeRequired to false"
           cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;PasswordChangeRequired:false;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">expire=`cat /etc/shadow | grep -i '^%username%:' | tr ':' ' ' | awk '{print $3}' | tr -d '\n'`;expr $expire - 7 | awk '{if ($0 > 0){print &quot;true&quot;} else {print &quot;false&quot;} }' | tr -d '\n'</rec>
        <rec key="expectedValue">true</rec>
      </var>

      <var set="2" lvl="2" vid="661698"
           dsc="[nxUser] Verify the HomeDirectory is set correctly on the target node"
           cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="home">/home/testhome</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;HomeDirectory:%home%;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | tr ':' ' ' | awk '{print $5}' | tr -d '\n'</rec>
        <rec key="expectedValue">%home%</rec>
      </var>

      <var set="2" lvl="3" vid="661699"
           dsc="[nxUser] Verify the HomeDirectory can be modified"
           cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="home">/home/testhome</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;useradd %username%</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;HomeDirectory:%home%;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | tr ':' ' ' | awk '{print $5}' | tr -d '\n'</rec>
        <rec key="expectedValue">%home%</rec>
        <rec key="successfulMsg">The home for user '%username%' is set successfully.</rec>
      </var>

      <var set="2" lvl="2" vid="661701"
           dsc="[nxUser] Verify the GroupID can be set correctly"
           cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="groupID">0</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;GroupID:%groupID%;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | tr ':' ' ' | awk '{print $4}' | tr -d '\n'</rec>
        <rec key="expectedValue">%groupID%</rec>
        <rec key="successfulMsg">The user '%username%' is created with corrct Group ID '%groupID%' successfully.</rec>
      </var>

      <var set="2" lvl="3" vid="661703"
           dsc="[nxUser] Verify the GroupID can be modified"
           cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="groupID">0</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;useradd %username%</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;GroupID:%groupID%;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/passwd | grep -i '^%username%:' | tr ':' ' ' | awk '{print $4}' | tr -d '\n'</rec>
        <rec key="expectedValue">%groupID%</rec>
        <rec key="successfulMsg">The group id for user '%username%' is set successfully.</rec>
      </var>

      <var set="2" lvl="2" vid="666927"
           dsc="[nxUser] Verify PasswordChangeRequired property won't be updated for existing user"
           cls="DSCAzure.nxUserTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="username">test_user</rec>
        <rec key="password">$6$q4Fpfjgb$R0mpH1GbnJVrNy1hwehJVrMqP7FaAloBiqfRciW4nBjzuOJKdb3EXlPdejhmMBZUbrZT/r.BPXcMMqIyRSNFm0</rec>
        <rec key="initialCmd">userdel -f -r %username%;groupdel %username%;useradd %username%</rec>
        <rec key="finalCmd">userdel -f -r %username%</rec>
        <!-- MOF Info. -->
        <rec key="propString">UserName:%username%;Ensure:Present;PasswordChangeRequired:true;Password:%password%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/shadow | grep -i '^%username%:' | tr ':' ' ' | awk '{print $3}' | tr -d '\n'</rec>
        <rec key="expectedValue">16547</rec>
        <rec key="expectedPasswordChangeRequired">false</rec>
        <rec key="successfulMsg">The user '%username%' is updated successfully, its password must be changed in next login</rec>
      </var>
      
    </section>

    <section sid="3" dsc="nxGroup Provider">

      <var set="3" lvl="1" vid="661714" dsc="[nxGroup] Verify if specific group is created if enumerated Ensure property is Present" cls="DSCAzure.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">absent</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:Present</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The group '%groupname%' is created successfully.</rec>
        <rec key="failedMsg">The group '%groupname%' is not created.</rec>
      </var>

      <var set="3" lvl="1" vid="661715" dsc="[nxGroup] Verify if specific group is removed if enumerated Ensure property is absent" cls="DSCAzure.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">present</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:absent</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The group '%groupname%' is removed successfully.</rec>
        <rec key="failedMsg">The group '%groupname%' is still exists.</rec>
      </var>

      <var set="3" lvl="2" vid="661716" dsc="[nxGroup] Verify if specific members are added into group if the specific members are not in group" cls="DSCAzure.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">absent</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;Members:root,scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | grep "root,scxuser" | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The member 'root,scxuser' is added into '%groupname%'.</rec>
        <rec key="failedMsg">The member 'root,scxuser' failed to add into '%groupname%'.</rec>
      </var>

      <var set="3" lvl="2" vid="661717" dsc="[nxGroup] Verify if the members are removed from group if the members are not in specific member list" cls="DSCAzure.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">present</rec>
        <rec key="members">root,scxuser</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;Members:root</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | grep "scxuser" | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The member 'scxuser' is removed into '%groupname%'.</rec>
        <rec key="failedMsg">The member 'scxuser' is still exist in '%groupname%'..</rec>
      </var>

      <var set="3" lvl="3" vid="661719" dsc="[nxGroup] Verify if error out if the configuration MOF have both Members property and MembersToInclude/MembersToExlude property" cls="DSCAzure.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">absent</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;Members:root;MembersToInclude:root;MembersToExclude:scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invalid MOF have both Members property and MembersToInclude/MembersToExlude property.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="3" lvl="3" vid="661720" dsc="[nxGroup] Verify if error out if invliad members are listed" cls="DSCAzure.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">absent</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;Members:xxxxx</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invliad members are listed.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="3" lvl="2" vid="661721" dsc="[nxGroup] Verify if the members which listed in MembersToInclude property are added into group" cls="DSCAzure.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">absent</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;MembersToInclude:root,scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | grep "root,scxuser" | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The member 'root,scxuser' is added into '%groupname%'.</rec>
        <rec key="failedMsg">The member 'root,scxuser' failed to add into '%groupname%'.</rec>
      </var>

      <var set="3" lvl="2" vid="661722" dsc="[nxGroup] Verify if the members which listed in MembersToExclude property are removed from group" cls="DSCAzure.nxGroupTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="groupname">test_group_automation</rec>
        <rec key="initialState">present</rec>
        <rec key="members">root,scxuser</rec>
        <!-- MOF Info. -->
        <rec key="propString">GroupName:%groupname%;Ensure:present;MembersToExclude:root,scxuser</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat /etc/group | grep -i '^%groupname%' | grep "root,scxuser" | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The member 'root,scxuser' is removed from '%groupname%'.</rec>
        <rec key="failedMsg">The member 'root,scxuser' failed to remove from '%groupname%'.</rec>
      </var>

    </section>

    <section sid="4" dsc="nxScript Provider">

      <var set="4" lvl="1" vid="661705"
           dsc="[nxScript] Verify SetScript is excuted when TestScript  is excuted return false"
           cls="DSCAzure.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">set_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="testScript">#!/bin/sh&#10;touch %t_path%&#10;exit 1</rec>
        <rec key="setScript">#!/bin/sh&#10;touch %s_path%&#10;</rec>
        <rec key="getScript">#!/bin/sh&#10;exit 0</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;t=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;echo $t$s | tr -d '\n'</rec>
        <rec key="expectedValue">11</rec>
        <rec key="successfulMsg">SetScript was executed.</rec>
        <rec key="failedMsg">SetScript was not executed.</rec>
      </var>

      <var set="4" lvl="1" vid="661706"
            dsc="[nxScript] Verify SetScript isn't excuted when TestScript  is excuted return true"
            cls="DSCAzure.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">test_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="testScript">#!/bin/sh&#10;echo test > %t_path%&#10;exit 0</rec>
        <rec key="setScript">#!/bin/sh&#10;touch %s_path%&#10;exit 0</rec>
        <rec key="getScript">#!/bin/sh&#10;exit 0</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">t=`cat %t_path% | tr -d '\n'`;s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;echo $t$s | tr -d '\n'</rec>
        <rec key="expectedValue">test0</rec>
        <rec key="successfulMsg">SetScript was not executed when TestScript is excuted and returns "true".</rec>
        <rec key="failedMsg">SetScript was executed when TestScript is excuted and returns "true".</rec>
      </var>

      <var set="4" lvl="2" vid="661707"
            dsc="[nxScript] Verify PowerShell gets a failed return value of 'The SendConfigurationApply function did not succeed.' when the setScript return false"
            cls="DSCAzure.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="g_name">get_file</rec>
        <rec key="g_path">%parentPath%/%g_name%</rec>
        <rec key="testScript">#!/bin/sh&#10;echo Testing quotes...&#10;exit 1</rec>
        <rec key="setScript">#!/bin/sh&#10;echo set> %s_path%&#10;exit 1</rec>
        <rec key="getScript">#!/bin/sh&#10;exit 0</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">PowerShell gets a failure: 'The SendConfigurationApply function did not succeed.' when the setScript return false.</rec>
        <rec key="failedMsg">PowerShell doesn't get a failure: 'The SendConfigurationApply function did not succeed.' when the setScript return false</rec>
      </var>

      <var set="4" lvl="1" vid="661708"
      dsc="[nxScript] Verify GetScript is excuted when we send a get request from Powershell server"
      cls="DSCAzure.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="g_name">get_file</rec>
        <rec key="g_path">%parentPath%/%g_name%</rec>
        <rec key="testScript">#!/bin/sh&#10;echo Testing quotes...&#10;exit 1</rec>
        <rec key="setScript">#!/bin/sh&#10;echo set> %s_path%&#10;exit 0</rec>
        <rec key="getScript">#!/bin/sh&#10;echo get >%g_path%&#10;exit 0</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %g_path% | tr -d '\n'</rec>
        <rec key="expectedValue">get</rec>
        <rec key="successfulMsg">GetScript is excuted.</rec>
        <rec key="failedMsg">GetScript is not excuted.</rec>
      </var>

      <var set="4" lvl="3" vid="661709"
          dsc="[nxScript] Verify powerShell gets a failed return value when the GetScript excute fails"
          cls="DSCAzure.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="g_name">get_file</rec>
        <rec key="g_path">%parentPath%/%g_name%</rec>
        <rec key="testScript">#!/bin/sh&#10;echo Testing quotes...&#10;exit 1</rec>
        <rec key="setScript">#!/bin/sh&#10;echo set 09> %s_path%&#10;exit 0</rec>
        <rec key="getScript">#!/bin/sh&#10;echo ``hostname`` >%g_path%&#10;exit 1</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %g_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">A general error occurred, not covered by a more specific error code</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">host=`hostname`;cat %g_path%  | grep -i $host |wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">powerShell gets a failure when the GetScript excution fails</rec>
        <rec key="failedMsg">powerShell does not get a failure  when the GetScript excution fails</rec>
      </var>

      <var set="4" lvl="2" vid="661710"
           dsc="[nxScript] Verify when create/modify a file in Script with a valid user works fine"
           cls="DSCAzure.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">test_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="user">scxuser</rec>
        <rec key="testScript">#!/bin/sh&#10;touch %t_path%&#10;exit 1</rec>
        <rec key="setScript">#!/bin/sh&#10;touch %s_path%</rec>
        <rec key="getScript">#!/bin/sh&#10;exit 0</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%;User:%user%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;t=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;u=`ls -l %parentPath% | grep -i '%s_name%' | awk '{print $3}' | tr -d '\n'`;echo $t$s$u | tr -d '\n'</rec>
        <rec key="expectedValue">11%user%</rec>
        <rec key="successfulMsg">SetScript was executed by specific user.</rec>
      </var>

      <var set="4" lvl="3" vid="661711"
           dsc="[nxScript] Verify when given a invalid user, it will return a failed result stating the User is invalid"
           cls="DSCAzure.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">test_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="user">invalidUser</rec>
        <rec key="testScript">#!/bin/sh&#10;touch %t_path%&#10;exit 1</rec>
        <rec key="setScript">#!/bin/sh&#10;touch %s_path%</rec>
        <rec key="getScript">#!/bin/sh&#10;exit 0</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%;User:%user%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;t=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;echo $t$s | tr -d '\n'</rec>
        <rec key="expectedValue">00</rec>
        <rec key="successfulMsg">Error out as invalid user.</rec>
      </var>

      <var set="4" lvl="2" vid="661712"
           dsc="[nxScript] Verify when create/modify a file in Script with a valid user works fine"
           cls="DSCAzure.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">set_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="group">scxuser</rec>
        <rec key="testScript">#!/bin/sh&#10;touch %t_path%&#10;exit 1</rec>
        <rec key="setScript">#!/bin/sh&#10;touch %s_path%</rec>
        <rec key="getScript">#!/bin/sh&#10;exit 0</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%;Group:%group%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;t=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;g=`ls -l %parentPath% | grep -i '%s_name%' | awk '{print $4}' | tr -d '\n'`;echo $t$s$g | tr -d '\n'</rec>
        <rec key="expectedValue">11%group%</rec>
        <rec key="successfulMsg">SetScript was executed by specific group.</rec>
      </var>

      <var set="4" lvl="3" vid="661713"
           dsc="[nxScript] Verify when create/modify a file in Script with a valid user works fine"
           cls="DSCAzure.nxScriptTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="parentPath">/tmp</rec>
        <rec key="s_name">set_file</rec>
        <rec key="s_path">%parentPath%/%s_name%</rec>
        <rec key="t_name">set_file</rec>
        <rec key="t_path">%parentPath%/%t_name%</rec>
        <rec key="group">invalidgroup</rec>
        <rec key="testScript">#!/bin/sh&#10;touch %t_path%&#10;exit 1</rec>
        <rec key="setScript">#!/bin/sh&#10;touch %s_path%</rec>
        <rec key="getScript">#!/bin/sh&#10;exit 0</rec>
        <rec key="initialCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <rec key="finalCmd">rm -rf %s_path%;rm -rf %t_path%</rec>
        <!-- MOF Info. -->
        <rec key="propString">SetScript:%setScript%;TestScript:%testScript%;GetScript:%getScript%;Group:%group%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">s=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;t=`ls -l %parentPath% | grep '^-' | grep -i '%s_name%$' | wc -l | tr -d '\n'`;echo $t$s | tr -d '\n'</rec>
        <rec key="expectedValue">00</rec>
        <rec key="successfulMsg">Error out as invalid group.</rec>
      </var>
       
    </section>

    <section sid="5" dsc="nxService Provider">

      <!-- Init Controller. -->
      <var set="5" lvl="1" vid="661810"
           dsc="[nxService] Verify the specific service is started successfully by ‘init’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">init</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661812"
          dsc="[nxService] Verify the specific service is stopped successfully by ‘init’ service controller"
          cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">init</rec>
        <rec key="initialState">Running</rec>
        <rec key="expectedState">Stopped</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661813"
           dsc="[nxService] Verify the specific service is enabled successfully by ‘init’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">init</rec>
        <rec key="initialEnabledState">false</rec>
        <rec key="Enabled">true</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%Enabled%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%Enabled%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661814"
           dsc="[nxService] Verify the specific service is disabled successfully by ‘init’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">init</rec>
        <rec key="initialEnabledState">true</rec>
        <rec key="Enabled">false</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%Enabled%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%Enabled%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>


      <!-- Upstart Controller. -->
      <var set="5" lvl="1" vid="661815"
           dsc="[nxService] Verify the specific service is started successfully by ‘upstart’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">upstart</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661817"
           dsc="[nxService] Verify the specific service is stopped successfully by ‘upstart’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">upstart</rec>
        <rec key="initialState">Running</rec>
        <rec key="expectedState">Stopped</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661818"
           dsc="[nxService] Verify the specific service is enabled successfully by ‘upstart’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">upstart</rec>
        <rec key="initialEnabledState">false</rec>
        <rec key="expectedEnabledState">true</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%expectedEnabledState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661819"
           dsc="[nxService] Verify the specific service is disabled successfully by ‘upstart’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">upstart</rec>
        <rec key="initialEnabledState">true</rec>
        <rec key="expectedEnabledState">false</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%expectedEnabledState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>
      
      <!-- Systemd Controller. -->
      <var set="5" lvl="1" vid="661820"
           dsc="[nxService] Verify the specific service is started successfully by ‘systemd’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">systemd</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661821"
           dsc="[nxService] Verify the specific service is stopped successfully by ‘systemd’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">systemd</rec>
        <rec key="initialState">Running</rec>
        <rec key="expectedState">Stopped</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="661824"
           dsc="[nxService] Verify the specific service is enabled successfully by ‘systemd’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">systemd</rec>
        <rec key="initialEnabledState">false</rec>
        <rec key="expectedEnabledState">true</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%expectedEnabledState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <var set="5" lvl="1" vid="663815"
           dsc="[nxService] Verify the specific service is disabled successfully by ‘systemd’ service controller"
           cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%testServiceName%</rec>
        <rec key="controller">systemd</rec>
        <rec key="initialEnabledState">true</rec>
        <rec key="expectedEnabledState">false</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;Enabled:%expectedEnabledState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%</rec>
        <rec key="expectedValue">%expectedState%</rec>
        <rec key="successfulMsg">Service is %expectedState% as expected.</rec>
      </var>

      <!-- Negative -->
      <var set="5" lvl="3" vid="663816"
          dsc="[nxService] Verify if error out if the specific service does not exist in specific 'init' controller"
          cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%invalidServiceName%</rec>
        <rec key="controller">init</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PS throws an error as expected due to the invalid service name.</rec>
        <rec key="failedMsg">PS does not throw an error while starting an invalid service.</rec>
      </var>

      <var set="5" lvl="3" vid="671134"
          dsc="[nxService] Verify if error out if the specific service does not exist in specific 'upstart' controller"
          cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%invalidServiceName%</rec>
        <rec key="controller">upstart</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PS throws an error as expected due to the invalid service name.</rec>
        <rec key="failedMsg">PS does not throw an error while starting an invalid service.</rec>
      </var>

      <var set="5" lvl="3" vid="671136"
          dsc="[nxService] Verify if error out if the specific service does not exist in specific 'systemd' controller"
          cls="DSCAzure.nxServiceTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="serviceName">%invalidServiceName%</rec>
        <rec key="controller">systemd</rec>
        <rec key="initialState">Stopped</rec>
        <rec key="expectedState">Running</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%serviceName%;Controller:%controller%;State:%expectedState%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PS throws an error as expected due to the invalid service name.</rec>
        <rec key="failedMsg">PS does not throw an error while starting an invalid service.</rec>
      </var>

    </section>

    <section sid="6" dsc="nxEnvironment Provider">

      <var set="6" lvl="1" vid="661727"
           dsc="[nxEnvironment] Verify if environment variable with value is created if only specify the Name and Value property"
           cls="DSCAzure.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/environment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi; if [ -f "%dscProfile%" ]; then sed -i '/%varName%/'d %dscProfile%; source %dscProfile%; fi;</rec>
        <rec key="initialCmd">%cleanVar%</rec>
        <rec key="finalCmd">%cleanVar%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Present;Value:%varValue%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %etcEnv%| grep "%varName%=%varValue%"| wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The environment variable is created successfully.</rec>
        <rec key="failedMsg">The environment variable is not created.</rec>
      </var>

      <var set="6" lvl="1" vid="661728"
           dsc="[nxEnvironment] Verify if Path environment variable with value is created if Path is 'true'"
           cls="DSCAzure.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">/tmp/var_661728</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/environment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi;if [ -f "%dscProfile%" ]; then sed -i '/\/tmp\/var_661728/'d %dscProfile%; source %dscProfile%; fi</rec>
        <!--rec key="cleanVar">sed -i '/\/tmp\/var_661728/'d %dscProfile%; source %dscProfile%</rec-->
        <rec key="initialCmd">%cleanVar%; mkdir %varValue%;source %dscProfile%</rec>
        <rec key="finalCmd">%cleanVar%; rm -rf %varValue%;source %dscProfile%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Present;Value:%varValue%;Path:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">source %dscProfile%;cat %dscProfile%| grep "PATH=\$PATH:\"%varValue%\""| wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The environment variable is created successfully if Path is true.</rec>
        <rec key="failedMsg">The environment variable is not created.</rec>
      </var>

      <var set="6" lvl="2" vid="661729"
           dsc="[nxEnvironment] Verify if environment variable without value is created if only specify the Name property"
           cls="DSCAzure.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/environment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi;if [ -f "%dscProfile%" ]; then sed -i '/%varValue%/'d %dscProfile%; source %dscProfile%; fi;</rec>
        <rec key="initialCmd">%cleanVar%</rec>
        <rec key="finalCmd">%cleanVar%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Present;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %etcEnv%| grep "%varName%=" |wc -l |tr -d '\n';cat %etcEnv%| grep "%envVarValue%" |wc -l |tr -d '\n';</rec>
        <rec key="expectedValue">10</rec>
        <rec key="successfulMsg">The environment variable without value is created successfully.</rec>
        <rec key="failedMsg">The environment variable without value is not created.</rec>
      </var>

      <var set="6" lvl="1" vid="661730"
           dsc="[nxEnvironment] Verify if environment variable is removed if the Ensure is 'absent'"
           cls="DSCAzure.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/environment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi;if [ -f "%dscProfile%" ]; then sed -i '/%varValue%/'d %dscProfile%; source %dscProfile%; fi</rec>
        <rec key="initialCmd">%cleanVar%; echo "%varName%=%varValue%" >> %etcEnv%; source %etcEnv%</rec>
        <rec key="finalCmd">%cleanVar%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:absent;Value:%varValue%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %etcEnv%| grep "%varName%" |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The environment variable is not removed if the Ensure is 'absent' and the variable is not originally added by DSCAzure.</rec>
        <rec key="failedMsg">The environment variable is removed successfully.</rec>
      </var>

      <var set="6" lvl="2" vid="661731"
             dsc="[nxEnvironment] Verify if Path environment variable which was added by DSC is removed when the Ensure is absent"
             cls="DSCAzure.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">/tmp/testPath</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="pathTmp">/tmp/path.tmp</rec>
        <rec key="initialCmd">echo "PATH=\$PATH:\"%varValue%\"" >> %dscProfile%</rec>
        <rec key="finalCmd">sed -i '/%pathTmp%/'d %etcEnv%;rm -f %pathTmp%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Value:%varValue%;Ensure:Absent;Path:True</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">source %dscProfile%;cat %dscProfile%| grep "PATH=\$PATH:\"%varValue%\""| wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The PATH environment variable is not changed or removed.</rec>
        <rec key="failedMsg">The PATH environment variable is removed successfully.</rec>
      </var>

      <var set="6" lvl="3" vid="661732"
           dsc="[nxEnvironment] Verify if Path environment variable which isn't originally added by DSC is not removed when the Ensure is absent"
           cls="DSCAzure.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/environment</rec>
        <rec key="initialCmd">echo "%varName%=%varValue%" > %etcEnv%</rec>
        <rec key="finalCmd">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi; if [ -f "%dscProfile%" ]; then sed -i '/%varName%/'d %dscProfile%; source %dscProfile%; fi;</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Value:%varValue%;Ensure:Absent;Path:True</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %etcEnv% | grep "%varName%=%varValue%" |wc -l |tr -d '\n';</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The PATH environment variable is not changed or removed.</rec>
      </var>

      <var set="6" lvl="2" vid="661737"
           dsc="[nxEnvironment] Verify if environment variable is updated if the environment variable exists with value"
           cls="DSCAzure.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="orgValue">envVarValue</rec>
        <rec key="newValue">envVarValue_new</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/environment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi</rec>
        <rec key="initialCmd">%cleanVar%; echo "%varName%=%orgValue%" >> %etcEnv%; source %etcEnv%</rec>
        <rec key="finalCmd">%cleanVar%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Present;Value:%newValue%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %etcEnv%| grep "%varName%=%newValue%"| wc -l |tr -d '\n';</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The environment variable is updated successfully.</rec>
        <rec key="failedMsg">The environment variable is not updated.</rec>
      </var>

      <var set="6" lvl="3" vid="661740"
           dsc="[nxEnvironment] Verify if environment variable is updated if the environment variable exists without value"
           cls="DSCAzure.nxEnvironmentTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="varName">testEnvVar</rec>
        <rec key="varValue">envVarValue</rec>
        <rec key="dscProfile">/etc/profile.d/DSCEnvironment.sh</rec>
        <rec key="etcEnv">/etc/environment</rec>
        <rec key="cleanVar">if [ -f "%etcEnv%" ]; then sed -i '/%varName%/'d %etcEnv%; source %etcEnv%; fi;if [ -f "%dscProfile%" ]; then sed -i '/%varName%/'d %dscProfile%; source %dscProfile%; fi</rec>
        <rec key="initialCmd">echo "%varName%=" > %etcEnv%</rec>
        <rec key="finalCmd">%cleanVar%</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%varName%;Ensure:Present;Value:%varValue%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %etcEnv%| grep "%varName%=%varValue%"| wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The environment variable is updated successfully.</rec>
        <rec key="failedMsg">The environment variable is not updated.</rec>
      </var>

    </section>

    <section sid="7" dsc="nxPackage Provider">
      <var set="7" lvl="1" vid="665043"
           dsc="[nxPackage] Verify if specific package is installed successfully by PackageManager"
           cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromSource%</rec>
        <rec key="manager">%testManagerName%</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;PackageManager:%manager%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%</rec>
        <rec key="successfulMsg">The specific package is installed as expected.</rec>
      </var>

      <var set="7" lvl="1" vid="665044"
     dsc="[nxPackage] Verify if specific package is installed via Path property"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">%packageFilePath%</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%</rec>
        <rec key="successfulMsg">The specific package is installed as expected.</rec>
      </var>

      <var set="7" lvl="2" vid="665045"
     dsc="[nxPackage] Verify if specific package is uninstalled successfully by PackageManager"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromSource%</rec>
        <rec key="manager">%testManagerName%</rec>
        <rec key="initialInstallState">True</rec>
        <rec key="expectedInstallState">False</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:absent;PackageManager:%manager%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%</rec>
        <rec key="successfulMsg">The specific package is uninstalled as expected.</rec>
      </var>

      <var set="7" lvl="2" vid="665046"
     dsc="[nxPackage] Verify if specific package is uninstalled via Path Property"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">%packageFilePath%</rec>
        <rec key="initialInstallState">True</rec>
        <rec key="expectedInstallState">False</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:absent;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%</rec>
        <rec key="successfulMsg">The specific package is uninstalled as expected.</rec>
      </var>

      <var set="7" lvl="2" vid="665047"
     dsc="[nxPackage] Verify if specific package is installed by default PackageManager if there is no Path and PackageManager property in Configuration MOF"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromSource%</rec>
        <rec key="manager">%testManagerName%</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:present</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%</rec>
        <rec key="successfulMsg">The specific package is installed by default PackageManager.</rec>
      </var>

      <var set="7" lvl="2" vid="665048"
     dsc="[nxPackage] Verify if specific package is installed via Path property successfully if there is both Path and PackageManager are provided"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="manager">%testManagerName%</rec>
        <rec key="localSrcPath">%packageFilePath%</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;PackageManager:%manager%;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%</rec>
        <rec key="successfulMsg">The specific package is installed via Path property.</rec>
      </var>

      <var set="7" lvl="2" vid="665049"
     dsc="[nxPackage] Verify if no error out if the actual return code does match the ReturnCode property"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">%packageFilePath%</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%;ReturnCode:0</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%;</rec>
        <rec key="successfulMsg">The return code matches the ReturnCode property.</rec>
      </var>

      <var set="7" lvl="2" vid="665050"
     dsc="[nxPackage] Verify if  error out if the actual return code does not match the ReturnCode property"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">%packageFilePath%</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">False</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%;ReturnCode:99</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as mismatched return code.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="7" lvl="3" vid="665051"
     dsc="[nxPackage] Verify if  PackageGroup is invalid if both Path and PackageGroup are provided"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">%packageFilePath%</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">False</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%;PackageGroup:true</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%;</rec>
        <rec key="successfulMsg">PowerShell error as both Path and PackageGroup are provided.</rec>
      </var>

      <var set="7" lvl="3" vid="665052"
     dsc="[nxPackage] Verify if error out if the specific package name is invalid"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">ErrorTestPackage</rec>
        <rec key="keyword">%Name%</rec>
        <rec key="manager">%testManagerName%</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">False</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;PackageManager:%manager%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invalid package name.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="7" lvl="3" vid="665056"
     dsc="[nxPackage] Verify if error out if the specific path doesn't exist"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">ErrorTestPackage</rec>
        <rec key="keyword">%Name%</rec>
        <rec key="localSrcPath">/sthwrong/testpackage3_1.0</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">False</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as invalid path.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="7" lvl="3" vid="665057"
     dsc="[nxPackage] Verify if  error out if the package name does not exist under path"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">testpackage1</rec>
        <rec key="keyword">%Name%</rec>
        <rec key="localSrcPath">/tmp/testpackage1</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">False</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as inexistent package under path.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>

      <var set="7" lvl="3" vid="665058"
     dsc="[nxPackage] Verify if  error out if the specific package is not supported by the Linux machine"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">unsupport</rec>
        <rec key="localSrcPath">/tmp/unsupport</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">False</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="successfulMsg">PowerShell error as unsupported package.</rec>
        <rec key="failedMsg">PowerShell should error out but it succeeds!</rec>
      </var>
    
      <var set="7" lvl="2" vid="845801"
     dsc="[nxPackage] Verify if specific package is installed via a remote HTTP path"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">http://dsc64-apache-01.scx.com/testpackage3_1.0</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%</rec>
        <rec key="successfulMsg">The specific package is installed as expected.</rec>
      </var>
      
      <var set="7" lvl="2" vid="845802"
     dsc="[nxPackage] Verify if specific package is installed via a remote HTTPs path"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">https://dsc64-apache-01.scx.com/testpackage3_1.0</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%</rec>
        <rec key="successfulMsg">The specific package is installed as expected.</rec>
      </var>
      
      <var set="7" lvl="2" vid="845804"
     dsc="[nxPackage] Verify if specific package is installed via a remote FTP path"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">ftp://dsc64-apache-01.scx.com/pub/testpackage3_1.0</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%expectedInstallState%</rec>
        <rec key="successfulMsg">The specific package is installed as expected.</rec>
      </var>
    
      <var set="7" lvl="3" vid="845807"
     dsc="[nxPackage] Verify if error out if the package source doesn't exist in the remote HTTP path"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">http://dsc64-apache-01.scx.com/testpackage4</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%initialInstallState%</rec>
        <rec key="successfulMsg">The specific package is not installed as expected.</rec>
      </var>
      
      <var set="7" lvl="3" vid="845808"
     dsc="[nxPackage] Verify if error out if the package source doesn't exist in the remote HTTPs path"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">https://dsc64-apache-01.scx.com/testpackage4</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%initialInstallState%</rec>
        <rec key="successfulMsg">The specific package is not installed as expected.</rec>
      </var>
      
      <var set="7" lvl="3" vid="845809"
     dsc="[nxPackage] Verify if error out if the package source doesn't exist in the remote FTP path"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">ftp://dsc64-apache-01.scx.com/pub/testpackage4</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%initialInstallState%</rec>
        <rec key="successfulMsg">The specific package is not installed as expected.</rec>
      </var>
      
      <var set="7" lvl="3" vid="845825"
     dsc="[nxPackage] Verify if error out if the remote path for source package is unreachable"
     cls="DSCAzure.nxPackageTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="Name">%packageFromPath%</rec>
        <rec key="localSrcPath">http://dsc64-apache-10.scx.com/testpackage3_1.0</rec>
        <rec key="initialInstallState">False</rec>
        <rec key="expectedInstallState">True</rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%Name%;Ensure:Present;FilePath:%localSrcPath%</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">%propString%;Installed:%initialInstallState%</rec>
        <rec key="successfulMsg">The specific package is not installed as expected.</rec>
      </var>
      
    </section>

    <section sid="8" dsc="nxSshAuthorizedKeys Provider">
      <var set="8" lvl="1" vid="664653"
           dsc="[nxSshAuthorizedKeys] Verify if the ssh authorized key for specific user is stored into ~/.ssh/authorizied_keys."
           cls="DSCAzure.nxSshAuthTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="keyComment">KeyCommentsTest</rec>
        <rec key="ensure">Present</rec>
        <rec key="userName">root</rec>
        <rec key="key">TestKey</rec>
        <rec key="keyFile">/root/.ssh/authorized_keys</rec>

        <rec key="initialCmd">cp %keyFile% /tmp/key_bak</rec>
        <rec key="finalCmd">cp /tmp/key_bak %keyFile%;rm /tmp/key_bak</rec>
        <!-- MOF Info. -->
        <rec key="propString">KeyComment:%keyComment%;Ensure:%ensure%;UserName:%userName%;Key:%key%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %keyFile% |grep -i %key% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Ssh authorized key for user %userName% is stored into %keyFile%.</rec>
        <rec key="failedMsg">Ssh authorized key for user %userName% didn't store into %keyFile%.</rec>
      </var>

      <var set="8" lvl="2" vid="664654"
           dsc="[nxSshAuthorizedKeys] Verify if authorized_keys file is created with specific authorized key if authorized_keys does not exist."
           cls="DSCAzure.nxSshAuthTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="keyComment">KeyCommentsTest</rec>
        <rec key="ensure">Present</rec>
        <rec key="userName">root</rec>
        <rec key="key">TestKey</rec>
        <rec key="keyFile">/root/.ssh/authorized_keys</rec>
        <rec key="initialCmd">cp %keyFile% /tmp/key_bak;rm %keyFile%</rec>
        <rec key="finalCmd">cp /tmp/key_bak %keyFile%;rm /tmp/key_bak</rec>
        <!-- MOF Info. -->
        <rec key="propString">KeyComment:%keyComment%;Ensure:%ensure%;UserName:%userName%;Key:%key%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %keyFile% |grep -i %key% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Authorized_keys file is created when it does not exist.</rec>
        <rec key="failedMsg">Authorized_keys file didn't create when it does not exist.</rec>
      </var>

      <var set="8" lvl="2" vid="664655"
           dsc="[nxSshAuthorizedKeys] Verify if authorized_keys file is created with specific authorized key if .ssh directory does not exist."
           cls="DSCAzure.nxSshAuthTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="keyComment">KeyCommentsTest</rec>
        <rec key="ensure">Present</rec>
        <rec key="userName">root</rec>
        <rec key="key">TestKey</rec>
        <rec key="keyFile">/root/.ssh/authorized_keys</rec>
        <rec key="initialCmd">cp %keyFile% /tmp/key_bak;rm -rf /root/.ssh/</rec>
        <rec key="finalCmd">cp /tmp/key_bak %keyFile%;rm /tmp/key_bak</rec>
        <!-- MOF Info. -->
        <rec key="propString">KeyComment:%keyComment%;Ensure:%ensure%;UserName:%userName%;Key:%key%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %keyFile% |grep -i %key% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Authorized_keys file is created when .ssh directory does not exist.</rec>
        <rec key="failedMsg">Authorized_keys file didn't create when .ssh directory does not exist.</rec>
      </var>

      <!--Not sure if the key should be updated.-->
      <var set="8" lvl="2" vid="664656"
           dsc="[nxSshAuthorizedKeys] Verify if the ssh authorized key is updated if the KeyComment exist."
           cls="DSCAzure.nxSshAuthTest">
        <snipref id="Variables" />
        <!--Linux Initial State.-->
        <rec key="keyComment">KeyCommentsTest</rec>
        <rec key="ensure">Present</rec>
        <rec key="userName">root</rec>
        <rec key="key">TestKey</rec>
        <rec key="keyFile">/root/.ssh/authorized_keys</rec>
        <rec key="initialCmd">cp %keyFile% /tmp/key_bak;echo "#KeyCommentsTest" > %keyFile%;echo "oldkey" >> %keyFile%</rec>
        <rec key="finalCmd">cp /tmp/key_bak %keyFile%;rm /tmp/key_bak</rec>
        <!--MOF Info.-->
        <rec key="propString">KeyComment:%keyComment%;Ensure:%ensure%;UserName:%userName%;Key:%key%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %keyFile% |grep -i %key% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Authorized_keys file isn't updated when the KeyComment does exist.</rec>
        <rec key="failedMsg">Authorized_keys file is updated when the KeyComment does exist.</rec>
      </var>

      <var set="8" lvl="2" vid="839476"
           dsc="[nxSshAuthorizedKeys] Verify if the ssh authorized key didn't updated if the KeyComment not exist."
           cls="DSCAzure.nxSshAuthTest">
        <snipref id="Variables" />
        <!--Linux Initial State.-->
        <rec key="keyComment">KeyCommentsTest</rec>
        <rec key="ensure">Present</rec>
        <rec key="userName">root</rec>
        <rec key="key">TestKey</rec>
        <rec key="keyFile">/root/.ssh/authorized_keys</rec>
        <rec key="initialCmd">cp %keyFile% /tmp/key_bak;echo %key% > %keyFile%</rec>
        <rec key="finalCmd">cp /tmp/key_bak %keyFile%;rm /tmp/key_bak</rec>
        <!--MOF Info.-->
        <rec key="propString">KeyComment:%keyComment%;Ensure:%ensure%;UserName:%userName%;Key:%key%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %keyFile% |grep -i %keyComment% |wc -l |tr -d '\n';cat %keyFile% |grep -i %key% |wc -l |tr -d '\n';</rec>
        <rec key="expectedValue">12</rec>
        <rec key="successfulMsg">Authorized_keys file isn't updated when the KeyComment does exist.</rec>
        <rec key="failedMsg">Authorized_keys file is updated when the KeyComment does exist.</rec>
      </var>

      <var set="8" lvl="2" vid="839477"
           dsc="[nxSshAuthorizedKeys] Verify if add multiple Keys to the ssh authorized key successfully."
           cls="DSCAzure.nxSshAuthTest">
        <snipref id="Variables" />
        <!--Linux Initial State.-->
        <rec key="keyComment">KeyCommentsTest</rec>
        <rec key="ensure">Present</rec>
        <rec key="userName">root</rec>
        <rec key="key">TestKey</rec>
        <rec key="keyFile">/root/.ssh/authorized_keys</rec>
        <rec key="initialCmd">cp %keyFile% /tmp/key_bak;echo "#oldKeyComment" > %keyFile%;echo "TestoldKey" >> %keyFile%;</rec>
        <rec key="finalCmd">cp /tmp/key_bak %keyFile%;rm /tmp/key_bak</rec>
        <!--MOF Info.-->
        <rec key="propString">KeyComment:%keyComment%;Ensure:%ensure%;UserName:%userName%;Key:%key%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %keyFile% |grep -i %key% |wc -l |tr -d '\n';cat %keyFile% |grep -i %keyComment% |wc -l |tr -d '\n';cat %keyFile% |grep -i "#oldKeyComment" |wc -l |tr -d '\n';cat %keyFile% |grep -i "TestoldKey" |wc -l |tr -d '\n';</rec>
        <rec key="expectedValue">1111</rec>
        <rec key="successfulMsg">Authorized_keys file isn't updated when the KeyComment does exist.</rec>
        <rec key="failedMsg">Authorized_keys file is updated when the KeyComment does exist.</rec>
      </var>

      <var set="8" lvl="2" vid="664658"
           dsc="[nxSshAuthorizedKeys] Verify if the ssh authorized key is delete if the Ensure is set to absent."
           cls="DSCAzure.nxSshAuthTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="keyComment">KeyCommentsTest</rec>
        <rec key="ensure">Absent</rec>
        <rec key="userName">root</rec>
        <rec key="key">TestKey</rec>
        <rec key="keyFile">/root/.ssh/authorized_keys</rec>
        <rec key="initialCmd">cp %keyFile% /tmp/key_bak;echo "#%keyComment%" > %keyFile%;echo "%key%" >> %keyFile%;</rec>
        <rec key="finalCmd">cp /tmp/key_bak %keyFile%;rm /tmp/key_bak</rec>
        <!-- MOF Info. -->
        <rec key="propString">KeyComment:%keyComment%;Ensure:%ensure%;UserName:%userName%;Key:%key%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">cat %keyFile% |grep -i %key% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">Ssh authorized key is delete when the Ensure is set to absent.</rec>
        <rec key="failedMsg">Ssh authorized key didn't delete when the Ensure is set to absent.</rec>
      </var>

    </section>
    
    <section sid="9" dsc="nxFileLine Provider">

      <var set="9" lvl="1" vid="814821"
           dsc="[nxFileLine] Verify if multiple lines in the file that match the value of DoesNotContainPattern are removed from the file."
           cls="DSCAzure.nxFileLineTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="filePath">/tmp/test</rec>
        <rec key="doesNotContainPattern">comments</rec>
        <rec key="keepLine">This line will be retained.</rec>
        <rec key="initialCmd">rm /tmp/test;touch /tmp/test;echo %doesNotContainPattern% > %filePath%;echo %doesNotContainPattern% >> %filePath%;echo %keepLine% >> %filePath%;</rec>
        <rec key="finalCmd">rm /tmp/test</rec>
        <!-- MOF Info. -->
        <rec key="propString">FilePath:%filePath%;DoesNotContainPattern:%doesNotContainPattern%;ContainsLine:</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %filePath% |grep -i %doesNotContainPattern% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">Lines that match the value of DoesNotContainPattern are removed from the file.</rec>
        <rec key="failedMsg">Lines that match the value of DoesNotContainPattern didn't remove from the file.</rec>
      </var>

      <var set="9" lvl="1" vid="814823"
           dsc="[nxFileLine] Verify if the file does not contain a line exactly matching the contents of ContainsLine, the line is written."
           cls="DSCAzure.nxFileLineTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="filePath">/tmp/test</rec>
        <rec key="containsLine">containsLineTest</rec>

        <rec key="initialCmd">rm /tmp/test;touch /tmp/test;echo "Line1" > %filePath%;echo "Line2" >> %filePath%;</rec>
        <rec key="finalCmd">rm /tmp/test</rec>
        <!-- MOF Info. -->
        <rec key="propString">FilePath:%filePath%;ContainsLine:%containsLine%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %filePath% |grep -i %containsLine% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The line is written into the end of the file.</rec>
        <rec key="failedMsg">The line isn't written into the end of the file.</rec>
      </var>

      <var set="9" lvl="1" vid="814824"
           dsc="[nxFileLine] Verify if the file contains a line exactly matching the contents of ContainsLine, no operation is performed."
           cls="DSCAzure.nxFileLineTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="filePath">/tmp/test</rec>
        <rec key="containsLine">containsLineTest</rec>

        <rec key="initialCmd">rm /tmp/test;touch /tmp/test;echo %containsLine% > %filePath%;</rec>
        <rec key="finalCmd">rm /tmp/test</rec>
        <!-- MOF Info. -->
        <rec key="propString">FilePath:%filePath%;ContainsLine:%containsLine%</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %filePath% |tr -d '\n'</rec>
        <rec key="expectedValue">%containsLine%</rec>
        <rec key="successfulMsg">No operation is performed when the file contains a line exactly matching the contents of ContainsLine.</rec>
        <rec key="failedMsg">The file is modified even the file contains a line exactly matching the contents of ContainsLine.</rec>
      </var>

      <var set="9" lvl="2" vid="814830"
           dsc="[nxFileLine] Verify if DoesNotContainPattern and ContainsLine are defined, lines match DoesNotContainPattern will be removed if they do not match ContainsLine."
           cls="DSCAzure.nxFileLineTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="filePath">/tmp/test</rec>
        <rec key="containsLine">ContainsLineTest</rec>
        <rec key="doesNotContainPattern">DoesNotContainPatternTest</rec>

        <rec key="initialCmd">rm /tmp/test;touch /tmp/test;echo %doesNotContainPattern% > %filePath%;echo %doesNotContainPattern% >> %filePath%;echo "Keep Line" >> %filePath%;</rec>
        <rec key="finalCmd">rm /tmp/test</rec>
        <!-- MOF Info. -->
        <rec key="propString">FilePath:%filePath%;ContainsLine:%containsLine%;DoesNotContainPattern:%doesNotContainPattern%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %filePath% |grep %doesNotContainPattern% | wc -l |tr -d '\n';cat %filePath% |grep %containsLine% | wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">01</rec>
        <rec key="successfulMsg">Lines match DoesNotContainPattern are removed when they do not match ContainsLine.</rec>
        <rec key="failedMsg">Lines match DoesNotContainPattern are not removed when they do not match ContainsLine.</rec>
      </var>

      <var set="9" lvl="2" vid="814835"
           dsc="[nxFileLine] Verify if DoesNotContainPattern and ContainsLine are defined, the file contains a line exactly matching ContainsLine, no operation for ContainsLine is performed."
           cls="DSCAzure.nxFileLineTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="filePath">/tmp/test</rec>
        <rec key="containsLine">ContainsLineTest</rec>
        <rec key="doesNotContainPattern">DoesNotContainPatternTest</rec>

        <rec key="initialCmd">rm /tmp/test;touch /tmp/test;echo %containsLine% > %filePath%;echo "Keep Line" >> %filePath%;</rec>
        <rec key="finalCmd">rm /tmp/test</rec>
        <!-- MOF Info. -->
        <rec key="propString">FilePath:%filePath%;ContainsLine:%containsLine%;DoesNotContainPattern:%doesNotContainPattern%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %filePath% |head -1 | tr -d '\n'</rec>
        <rec key="expectedValue">%containsLine%</rec>
        <rec key="successfulMsg">No operation for ContainsLine is performed when the file contains a line exactly matching ContainsLine.</rec>
        <rec key="failedMsg">The file is modified even the file contains a line exactly matching ContainsLine.</rec>
      </var>

      <var set="9" lvl="2" vid="814839"
           dsc="[nxFileLine] Verify if DoesNotContainPattern and ContainsLine are defined, the line is appended when the file doesn't contain a line exactly matching ContainsLine."
           cls="DSCAzure.nxFileLineTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="filePath">/tmp/test</rec>
        <rec key="containsLine">EndLine</rec>
        <rec key="doesNotContainPattern">DoesNotContainPatternTest</rec>

        <rec key="initialCmd">rm /tmp/test;touch /tmp/test;echo "Line1" > %filePath%;echo "Line2" >> %filePath%;</rec>
        <rec key="finalCmd">rm /tmp/test</rec>
        <!-- MOF Info. -->
        <rec key="propString">FilePath:%filePath%;ContainsLine:%containsLine%;DoesNotContainPattern:%doesNotContainPattern%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %filePath% |tail -1 | tr -d '\n'</rec>
        <rec key="expectedValue">%containsLine%</rec>
        <rec key="successfulMsg">The line is written into the end of the file when doesn't contain a line exactly matching ContainsLine.</rec>
        <rec key="failedMsg">The line isn't written into the end of the file when doesn't contain a line exactly matching ContainsLine.</rec>
      </var>

      <var set="9" lvl="2" vid="816248"
           dsc="[nxFileLine] Verify if the line match the value of DoesNotContainPattern is removed when the DoesNotContainPattern contains metacharacters."
           cls="DSCAzure.nxFileLineTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="filePath">/tmp/test</rec>
        <rec key="doesNotContainPattern">^DoesNotContainPatternTest$</rec>

        <rec key="initialCmd">rm /tmp/test;touch /tmp/test;echo "DoesNotContainPatternTest" > %filePath%;echo "Line1" >> %filePath%;</rec>
        <rec key="finalCmd">rm /tmp/test</rec>
        <!-- MOF Info. -->
        <rec key="propString">FilePath:%filePath%;DoesNotContainPattern:%doesNotContainPattern%;ContainsLine:</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %filePath% |grep -i "DoesNotContainPatternTest" |wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">The line match the value of DoesNotContainPattern is removed when the DoesNotContainPattern contains metacharacters.</rec>
        <rec key="failedMsg">The line match the value of DoesNotContainPattern is not removed when the DoesNotContainPattern contains metacharacters.</rec>
      </var>

      <var set="9" lvl="2" vid="816249"
           dsc="[nxFileLine] Verify if ContainsLine can be identified when it contains metacharacters."
           cls="DSCAzure.nxFileLineTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="filePath">/tmp/test</rec>
        <rec key="containsLine">^ContainsLineTest$</rec>

        <rec key="initialCmd">rm /tmp/test;touch /tmp/test;echo "Line1" > %filePath%;echo "Line2" >> %filePath%;</rec>
        <rec key="finalCmd">rm /tmp/test</rec>
        <!-- MOF Info. -->
        <rec key="propString">FilePath:%filePath%;ContainsLine:%containsLine%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %filePath% |grep -i "ContainsLineTest" |wc -l | tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The ContainsLine can be identified when it contains metacharacters.</rec>
        <rec key="failedMsg">The ContainsLine can't identified when it contains metacharacters.</rec>
      </var>

      <var set="9" lvl="3" vid="814843"
           dsc="[nxFileLine] Verify if no operation is proformed when no lines match the value of DoesNotContainPattern."
           cls="DSCAzure.nxFileLineTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="filePath">/tmp/test</rec>
        <rec key="doesNotContainPattern">DoesNotContainPatternTest</rec>

        <rec key="initialCmd">rm /tmp/test;touch /tmp/test;echo "Line1" > %filePath%;</rec>
        <rec key="finalCmd">rm /tmp/test</rec>
        <!-- MOF Info. -->
        <rec key="propString">FilePath:%filePath%;DoesNotContainPattern:%doesNotContainPattern%;ContainsLine:</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat %filePath% | tr -d '\n'</rec>
        <rec key="expectedValue">Line1</rec>
        <rec key="successfulMsg">No operation is proformed when no lines match the value of DoesNotContainPattern.</rec>
        <rec key="failedMsg">The file is modified even no lines match the value of DoesNotContainPattern.</rec>
      </var>

      <var set="9" lvl="3" vid="814845"
           dsc="[nxFileLine] Verify if error out when the FilePath doesn't exist."
           cls="DSCAzure.nxFileLineTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="filePath">/tmp/test</rec>
        <rec key="containsLine">ContainsLineTest</rec>

        <rec key="initialCmd">rm /tmp/test</rec>
        <rec key="finalCmd"></rec>
        <!-- MOF Info. -->
        <rec key="propString">FilePath:%filePath%;ContainsLine:%containsLine%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!--Verify Linux State.-->
        <rec key="verificationCmd"></rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">Send error out when the FilePath doesn't exist.</rec>
        <rec key="failedMsg">No error out when the FilePath doesn't exist.</rec>
      </var>
      
    </section>

    <section sid="10" dsc="nxIPAddress Provider">

      <var set="10" lvl="1" vid="690325"
        dsc="[nxIPAddress] Verify if IPv4 address is set on a network interface if the address doesn't exist before and Ensure property is 'Present'"
        cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="ensure">Present</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="prefixLength">32</rec>
        <rec key="mask">255.255.255.255</rec>
        <rec key="initialSet">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:absent;AddressFamily:%addressFamily%;PrefixLength:%mask%;</rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;PrefixLength:%prefixLength%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;PrefixLength:%mask%;</rec>
        <rec key="successfulMsg">IPv4 address is set on a network interface when the address doesn't exist before and Ensure property is 'Present'</rec>
        <rec key="failedMsg">IPv4 address isn't set on a network interface when Ensure property is 'Present'</rec>
      </var>

      <var set="10" lvl="1" vid="690345"
        dsc="[nxIPAddress] Verify if IPv6 address is set on a network interface if the address doesn't exist before and Ensure property is 'Present'"
        cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">2001:4898:d8:f205:15:5dff:fe22:724</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="ensure">Present</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="addressFamily">IPv6</rec>
        <rec key="prefixLength">32</rec>
        <rec key="initialSet">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:absent;AddressFamily:%addressFamily%;</rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;PrefixLength:%prefixLength%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;PrefixLength:%prefixLength%;</rec>
        <rec key="successfulMsg">IPv6 address is set on a network interface when the address doesn't exist before and Ensure property is 'Present'</rec>
        <rec key="failedMsg">IPv6 address isn't set on a network interface when Ensure property is 'Present'</rec>
      </var>

      <var set="10" lvl="2" vid="690374"
        dsc="[nxIPAddress] Verify if the protocol to obtain an IP is dhcp for IPv4 while BootProtocol property is Automatic."
        cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="ensure">Present</rec>
        <rec key="bootProtocol">Automatic</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;</rec>
        <rec key="successfulMsg">the protocol to obtain an IP is dhcp for IPv4 while BootProtocol property is Automatic.</rec>
        <rec key="failedMsg">the protocol didn't to obtain an IP is dhcp for IPv4 while BootProtocol property is Automatic.</rec>
      </var>

      <var set="10" lvl="2" vid="690519"
        dsc="[nxIPAddress] Verify if the protocol to obtain an IP is autoconf for IPv6 while BootProtocol property is Automatic."
        cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">2001:4898:d8:f205:15:5dff:fe22:724</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="ensure">Present</rec>
        <rec key="bootProtocol">Automatic</rec>
        <rec key="addressFamily">IPv6</rec>
        
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;</rec>
        <rec key="successfulMsg">the protocol to obtain an IP is Autoconf for IPv6 while BootProtocol property is Automatic.</rec>
        <rec key="failedMsg">the protocol didn't to obtain an IP is Autoconf for IPv6 while BootProtocol property is Automatic.</rec>
      </var>

      <var set="10" lvl="1" vid="690538"
     dsc="[nxIPAddress] Verify if IPv4 address is removed if the address exists before and Ensure property is 'Absent'"
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="ensure">Absent</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="initialSet">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;AddressFamily:%addressFamily%;</rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;</rec>
        <rec key="successfulMsg">IPv4 address is removed when Ensure property is 'Absent'.</rec>
        <rec key="failedMsg">IPv4 address isn't removed when Ensure property is 'Absent'.</rec>
      </var>

      <var set="10" lvl="1" vid="690540"
        dsc="[nxIPAddress] Verify if IPv6 address removed if the address exists before and Ensure property is 'Absent'"
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">2001:4898:d8:f205:15:5dff:fe22:724</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="ensure">Absent</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="addressFamily">IPv6</rec>
        <rec key="initialSet">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;AddressFamily:%addressFamily%;</rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;</rec>
        <rec key="successfulMsg">IPv6 address is removed when Ensure property is 'Absent'.</rec>
        <rec key="failedMsg">IPv6 address isn't removed when Ensure property is 'Absent'.</rec>
      </var>

      <var set="10" lvl="2" vid="690563"
           dsc="[nxIPAddress] Verify if the subnet mask is specified while PrefixLength property is set."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="prefixLength">32</rec>
        <rec key="mask">255.255.255.255</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;AddressFamily:%addressFamily%;PrefixLength:%prefixLength%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;AddressFamily:%addressFamily%;PrefixLength:%mask%;</rec>
        <rec key="successfulMsg">The subnet mask is specified while PrefixLength property is set.</rec>
        <rec key="failedMsg">The subnet mask isn't specified while PrefixLength property is set.</rec>
      </var>

      <var set="10" lvl="2" vid="690564"
           dsc="[nxIPAddress] Verify if the default setting for Ensure is Present."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="prefixLength">32</rec>
        <rec key="mask">255.255.255.255</rec>
        <rec key="initialSet">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:absent;</rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;AddressFamily:%addressFamily%;PrefixLength:%prefixLength%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;AddressFamily:%addressFamily%;</rec>
        <rec key="successfulMsg">The default setting for Ensure is Present.</rec>
        <rec key="failedMsg">The default setting for Ensure is Absent.</rec>
      </var>

      <var set="10" lvl="2" vid="690565"
           dsc="[nxIPAddress] Verify if the default setting for BootProtocol is Automatic."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;AddressFamily:%addressFamily%;</rec>
        <rec key="successfulMsg">The default setting for Ensure is Present.</rec>
        <rec key="failedMsg">The default setting for Ensure is Absent.</rec>
      </var>

      <var set="10" lvl="2" vid="690566"
           dsc="[nxIPAddress] Verify if the default setting for AddressFamily is IPv4."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="prefixLength">32</rec>
        <rec key="mask">255.255.255.255</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="initialSet">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;Ensure:absent;</rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;PrefixLength:%prefixLength%;BootProtocol:%bootProtocol%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;</rec>
        <rec key="successfulMsg">The default setting for AddressFamily is IPv4.</rec>
        <rec key="failedMsg">The default setting for AddressFamily isn't IPv4.</rec>
      </var>

      <var set="10" lvl="3" vid="690569"
           dsc="[nxIPAddress] Verify if error out if the provided IP address is not a right IPv4 format."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.300</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verificationCmd"></rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">Send error out if the provided IP address is not a right IPv4 format.</rec>
        <rec key="failedMsg">No error out if the provided IP address is not a right IPv4 format.</rec>
      </var>

      <var set="10" lvl="3" vid="690570"
           dsc="[nxIPAddress] Verify if error out if the provided IP address is not a right IPv6 format."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">2001:4898:d8:f205:15:5dff:fe22:72000</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="addressFamily">IPv6</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verificationCmd"></rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">Send error out if the provided IP address is not a right IPv6 format.</rec>
        <rec key="failedMsg">No error out if the provided IP address is not a right IPv6 format.</rec>
      </var>

      <var set="10" lvl="3" vid="690574"
           dsc="[nxIPAddress] Verify if a new IP address is added on network interface while IPAddress is provided and BootProtocol is specified as 'Automatic'."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="bootProtocol">Automatic</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;AddressFamily:%addressFamily%;</rec>
        <rec key="successfulMsg">Send error out while the specified InterfaceName doesn't exist.</rec>
        <rec key="failedMsg">No error out while the specified InterfaceName doesn't exist.</rec>
      </var>

      <var set="10" lvl="3" vid="690902"
           dsc="[nxIPAddress] Verify if error out if the provided gateway is not a right IPv4 format."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="gateway">11.10.10.300</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;DefaultGateway:%gateway%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verificationCmd"></rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">Send error out if the provided gateway is not a right IPv4 format.</rec>
        <rec key="failedMsg">No error out if the provided gateway is not a right IPv4 format.</rec>
      </var>

      <var set="10" lvl="3" vid="690903"
           dsc="[nxIPAddress] Verify if error out if the provided gateway is not a right IPv6 format."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">2001:4898:d8:f205:15:5dff:fe22:723</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="addressFamily">IPv6</rec>
        <rec key="gateway">2001:4898:d8:f205:15:5dff:fe22:72000</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;DefaultGateway:%gateway%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verificationCmd"></rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">Send error out if the provided gateway is not a right IPv6 format.</rec>
        <rec key="failedMsg">No error out if the provided gateway is not a right IPv6 format.</rec>
      </var>

      <var set="10" lvl="3" vid="690919"
           dsc="[nxIPAddress] Verify if error out while the PrefixLength value is greater than 32."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="prefixLength">50</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;PrefixLength:%prefixLength%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verificationCmd"></rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">Send error out while the PrefixLength value is greater than 32.</rec>
        <rec key="failedMsg">No error out while the PrefixLength value is greater than 32.</rec>
      </var>

      <var set="10" lvl="3" vid="690921"
          dsc="[nxIPAddress] Verify if error out while provided IPAddress is IPv4 format but AddressFamily is set to 'IPv6'"
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="ensure">Present</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="addressFamily">IPv6</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification"></rec>
        <rec key="successfulMsg">error out while provided IPAddress is IPv4 format but AddressFamily is set to 'IPv6'</rec>
        <rec key="failedMsg">No error out while provided IPAddress is IPv4 format but AddressFamily is set to 'IPv6'</rec>
      </var>

      <var set="10" lvl="3" vid="690923"
          dsc="[nxIPAddress] Verify if error out while provided IPAddress is IPv6 format but AddressFamily is set to 'IPv4'"
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">2001:4898:d8:f205:15:5dff:fe22:724</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="ensure">Present</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;BootProtocol:%bootProtocol%;Ensure:%ensure%;AddressFamily:%addressFamily%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification"></rec>
        <rec key="successfulMsg">error out while provided IPAddress is IPv6 format but AddressFamily is set to 'IPv4'</rec>
        <rec key="failedMsg">No error out while provided IPAddress is IPv6 format but AddressFamily is set to 'IPv4'</rec>
      </var>

      <var set="10" lvl="3" vid="690925"
           dsc="[nxIPAddress] Verify if no error out if the IP address doesn't exist before and Ensure property is Absent."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="ensure">Absent</rec>
        <rec key="initialSet">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;Ensure:%ensure%;</rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;Ensure:%ensure%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;Ensure:%ensure%;</rec>
        <rec key="successfulMsg">no change while the IP address doesn't exist before and Ensure property is Absent.</rec>
        <rec key="failedMsg">Have a change while the IP address doesn't exist before and Ensure property is Absent.</rec>
      </var>

      <var set="10" lvl="3" vid="690930"
           dsc="[nxIPAddress] Verify if the information on a network interface is updated accordlingly while the address exists before and Ensure property is Present."
           cls="DSCAzure.nxIPAddressTest">
        <snipref id="Variables" />
        <rec key="ipAddress">11.10.10.10</rec>
        <rec key="interfaceName">eth1</rec>
        <rec key="bootProtocol">Static</rec>
        <rec key="ensure">Present</rec>
        <rec key="addressFamily">IPv4</rec>
        <rec key="prefixLength">32</rec>
        <rec key="mask">255.255.255.255</rec>
        <rec key="initialSet">IPAddress:11.10.10.11;InterfaceName:%interfaceName%;Ensure:present;BootProtocol:%bootProtocol%;PrefixLength:%mask%;</rec>

        <!-- MOF Info. -->
        <rec key="propString">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;Ensure:%ensure%;BootProtocol:%bootProtocol%;PrefixLength:%prefixLength%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">IPAddress:%ipAddress%;InterfaceName:%interfaceName%;Ensure:%ensure%;BootProtocol:%bootProtocol%;PrefixLength:%mask%;</rec>
        <rec key="successfulMsg">IPAddress is updated accordlingly while the address exists before and Ensure property is Present.</rec>
        <rec key="failedMsg">IPAddress isn't updated accordlingly while the address exists before and Ensure property is Present.</rec>
      </var>
      
    </section>

    <section sid="11" dsc="nxDNSServerAddress Provider">

      <var set="11" lvl="1" vid="690318"
           dsc="[nxDNSServerAddress] Verify if DNS Server Address is added while providing a IPv4 address which does not exist in DNS."
           cls="DSCAzure.DNSAddressTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="address">128.9.0.107</rec>
        <!--rec key="initialCmd">sed -i '/%address%/d' /etc/resolv.conf</rec-->
        <!-- MOF Info. -->
        <rec key="propString">Address:%address%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">Address:%address%;</rec>
        <rec key="successfulMsg">IPV4 address is added as a DNS Server Address successfully.</rec>
      </var>

      <var set="11" lvl="1" vid="690319"
           dsc="[nxDNSServerAddress] Verify if DNS Server Address is added while providing a IPv6 address which does not exist in DNS."
           cls="DSCAzure.DNSAddressTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="address">2001:da8:8000:1:202:120:2:101</rec>
        <!--rec key="initialCmd">sed -i '/%address%/d' /etc/resolv.conf</rec-->
        <!-- MOF Info. -->
        <rec key="propString">Address:%address%;AddressFamily:IPv6</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">Address:%address%;</rec>
        <rec key="successfulMsg">IPV6 address is added as a DNS Server Address successfully.</rec>
      </var>
      
      <var set="11" lvl="2" vid="690320"
           dsc="[nxDNSServerAddress] Verify if multiple IPV4 DNS Server Addresses are added."
           cls="DSCAzure.DNSAddressTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="address">128.9.0.107</rec>
        <rec key="address1">128.9.0.12</rec>
        <rec key="address2">128.9.0.165</rec>
        <!--rec key="initialCmd">sed -i '/%address%\|%address1%\|%address2%/d' /etc/resolv.conf</rec-->
        <!-- MOF Info. -->
        <rec key="propString">Address:%address%,%address1%,%address2%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">Address:%address%,%address1%,%address2%;</rec>
        <rec key="successfulMsg">Multiple DNS Server Addresses are added successfully.</rec>
      </var>
      
      <var set="11" lvl="3" vid="690321"
           dsc="[nxDNSServerAddress] Verify if error out if more than three DNS Server Addresses are provided."
           cls="DSCAzure.DNSAddressTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="address">128.9.0.107</rec>
        <rec key="address1">128.9.0.12</rec>
        <rec key="address2">128.9.0.165</rec>
        <rec key="address3">128.9.0.170</rec>
        <!--rec key="initialCmd">sed -i '/%address%\|%address1%\|%address2%|%address3%/d' /etc/resolv.conf</rec-->
        <!-- MOF Info. -->
        <rec key="propString">Address:%address%,%address1%,%address2%,%address3%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
      </var>
      
      <var set="11" lvl="3" vid="690322"
           dsc="[nxDNSServerAddress] Verify if error out if the provided address is not a right IPv4 format."
           cls="DSCAzure.DNSAddressTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="address">10.320.2.6</rec>
        <!--rec key="initialCmd">sed -i '/%address%/d' /etc/resolv.conf</rec-->
        <!-- MOF Info. -->
        <rec key="propString">Address:%address%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
      </var>
      
      <var set="11" lvl="3" vid="690323"
           dsc="[nxDNSServerAddress] Verify if error out if the provided address is not a right IPv6 format."
           cls="DSCAzure.DNSAddressTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="address">2001::8000::202:120</rec>
        <!--rec key="initialCmd">sed -i '/%address%/d' /etc/resolv.conf</rec-->
        <!-- MOF Info. -->
        <rec key="propString">Address:%address%;AddressFamily:IPv6</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
      </var>
      
      <var set="11" lvl="2" vid="690324"
           dsc="[nxDNSServerAddress] Verify if no error out if the provided address exists in DNS."
           cls="DSCAzure.DNSAddressTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="address">128.9.0.107</rec>
        <rec key="initialCmd">if [ -f /etc/resolv.conf ]; then echo -e "domain scx.com\nsearch scx\nnameserver  %address%" >/etc/resolv.conf;fi;if [ -f /etc/sysconfig/network/config ]; then sed -i 's/NETCONFIG_DNS_STATIC_SEARCHLIST=.*/NETCONFIG_DNS_STATIC_SEARCHLIST=\"%address% \"/' /etc/sysconfig/network/config;fi;if [ -f /etc/network/interfaces ]; then sed -i 's/dns-nameservers.*/dns-nameservers  %address%/' /etc/network/interfaces;fi;</rec>
        <!-- MOF Info. -->
        <rec key="propString">Address:%address%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">Address:%address%;</rec>
        <rec key="successfulMsg">Multiple DNS Server Addresses are added successfully.</rec>
      </var>
    
      <var set="11" lvl="2" vid="886810"
           dsc="[nxDNSServerAddress] Verify if multiple IPv6 DNS Server Addresses are added."
           cls="DSCAzure.DNSAddressTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="address">2001:da8:8000:1:202:120:2:101,2001:da8:8000:1:202:120:2:124,2001:da8:8000:1:202:120:2:190</rec>
        <!--rec key="initialCmd">sed -i '/%address%/d' /etc/resolv.conf</rec-->
        <!-- MOF Info. -->
        <rec key="propString">Address:%address%;AddressFamily:IPv6</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verification">Address:%address%;</rec>
        <rec key="successfulMsg">Mutiple IPv6 DNS Server address are added .</rec>
      </var>

    </section>

    <section sid="12" dsc="nxArchive Provider">

      <var set="12" lvl="1" vid="865889"
           dsc="[nxArchive] Verify if unpack a source file which is .tar file to destination path successfully."
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo %fileContent%> %filePath%;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">ls -l %destinationPath% |grep -i %fileName% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Unpack a source file which is .tar file to destination path successfully</rec>
        <rec key="failedMsg">Fail to unpack a source file which is .tar file to destination path.</rec>
      </var>

      <var set="12" lvl="1" vid="865890"
           dsc="[nxArchive] Verify if unpack a source file which is .zip file to destination path successfully."
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.zip</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo %fileContent%> %filePath%;cd /tmp/;zip %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">ls -l %destinationPath% |grep -i %fileName% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Unpack a source file which is .zip file to destination path successfully</rec>
        <rec key="failedMsg">Fail to unpack a source file which is .zip file to destination path.</rec>
      </var>

      <var set="12" lvl="1" vid="865891"
           dsc="[nxArchive] Verify if unpack a source file which is .tar.gz file to destination path successfully."
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar.gz</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo %fileContent%> %filePath%;cd /tmp/;tar -zcvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">ls -l %destinationPath% |grep -i %fileName% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Unpack a source file which is .tar.gz file to destination path successfully</rec>
        <rec key="failedMsg">Fail to unpack a source file which is .tar.gz file to destination path.</rec>
      </var>

      <var set="12" lvl="1" vid="865907"
           dsc="[nxArchive] Verify if the source file is unpacked while destination is a file and Force is set to true."
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %destinationPath%;touch %filePath%;echo %fileContent%> %filePath%;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Force:True;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">ls -l %destinationPath% |grep -i %fileName% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The source file is unpacked successfully while destination is a file and Force is set to true.</rec>
        <rec key="failedMsg">Fail to unpack a source file while destination is a file and Force is set to true.</rec>
      </var>

      <var set="12" lvl="1" vid="878420"
           dsc="[nxArchive] Verify if unpack source file successfully when set 'Ensure' to 'Present'"
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo %fileContent%> %filePath%;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Ensure:Present;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">ls -l %destinationPath% |grep -i %fileName% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Unpack source file successfully when set 'Ensure' to 'Present'.</rec>
        <rec key="failedMsg">Fail to unpack source file when set 'Ensure' to 'Present'.</rec>
      </var>

      <var set="12" lvl="1" vid="878451"
           dsc="[nxArchive] Verify if the source file is unpacked to destination path when set 'DependsOn'"
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="initialCmd">rm -rf /tmp/*;echo "just for archive test" > test.txt;tar -cvf source.tar test.txt;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;rm source.tar;rm test.txt</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;DependsOn:[nxFile]File;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">ls -l %destinationPath% |grep -i %fileName% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">The source file is unpacked to destination path when set 'DependsOn' successfully</rec>
        <rec key="failedMsg">Fail to unpack the source file is unpacked to destination path when set 'DependsOn'.</rec>
      </var>

      <var set="12" lvl="2" vid="878470"
           dsc="[nxArchive] Verify if the source file is unpacked normally when destination path is already exist."
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;mkdir -p %destinationPath%;touch "%destinationPath%/test1.txt";touch %filePath%;echo %fileContent%> %filePath%;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">ls -l %destinationPath% |grep -i %fileName% |wc -l |tr -d '\n';ls -l "%destinationPath%/test1.txt"|wc -l |tr -d '\n';</rec>
        <rec key="expectedValue">11</rec>
        <rec key="successfulMsg">The source file is unpacked normally when destination path is already exist.</rec>
        <rec key="failedMsg">Fail to unpack the source file when destination path is already exist.</rec>
      </var>

      <var set="12" lvl="2" vid="878421"
           dsc="[nxArchive] Verify if didn't unpack the source file to destination path when set 'Ensure' to 'Absent'"
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo %fileContent%> %filePath%;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Ensure:Absent;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">ls -l %destinationPath% 2>/dev/null|grep -i %fileName% |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">0</rec>
        <rec key="successfulMsg">Didn't unpack the source file to destination path when set 'Ensure' to 'Absent'.</rec>
        <rec key="failedMsg">Unpack the source file to destination path even set 'Ensure' to 'Absent'.</rec>
      </var>

      <var set="12" lvl="2" vid="865906"
           dsc="[nxArchive] Verify if error out while destination is a file and Force is set to false."
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %destinationPath%;echo "testfile" > %destinationPath%;touch %filePath%;echo %fileContent%> %filePath%;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Force:false;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!--Verify Linux State.-->
        <rec key="verificationCmd"></rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">Send error out while destination is a file and Force is set to false.</rec>
        <rec key="failedMsg">Didn't send error out while destination is a file and Force is set to false.</rec>
      </var>

      <var set="12" lvl="2" vid="865892"
           dsc="[nxArchive] Verify if destination file is updated if Checksum is 'ctime' and the source is newer than destination file."
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>
        <rec key="newContent">ctime was changed.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo %fileContent%> %filePath%;mkdir -p %destinationPath%;cp %filePath% %destinationPath%/;echo %newContent%> %filePath%;chmod a+x %filePath%; cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Checksum:ctime;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat "%destinationPath%/%fileName%"|grep -i "%newContent%" |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Destination file is updated if Checksum is 'ctime' and the source is newer than destination file.</rec>
        <rec key="failedMsg">Destination file is not updated if Checksum is 'ctime' and the source is newer than destination file.</rec>
      </var>

      <var set="12" lvl="2" vid="865897"
           dsc="[nxArchive] Verify if destination file is updated if Checksum is 'mtime' and the source is newer than destination file."
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>
        <rec key="newContent">ctime was changed.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo %fileContent%> %filePath%;mkdir -p %destinationPath%;cp %filePath% %destinationPath%/;echo %newContent%> %filePath%;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Checksum:mtime;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat "%destinationPath%/%fileName%"|grep -i "%newContent%" |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Destination file is updated if Checksum is 'mtime' and the source is newer than destination file.</rec>
        <rec key="failedMsg">Destination file is not updated if Checksum is 'mtime' and the source is newer than destination file.</rec>
      </var>

      <var set="12" lvl="2" vid="865899"
           dsc="[nxArchive] Verify if destination file is updated if Checksum is 'md5' and the source is other than destination file"
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>
        <rec key="newContent">ctime was changed.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo %fileContent%> %filePath%;mkdir -p %destinationPath%;cp %filePath% %destinationPath%/;echo %newContent%> %filePath%;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Checksum:md5;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat "%destinationPath%/%fileName%"|grep -i "%newContent%" |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Destination file is updated if Checksum is 'md5' and the source is newer than destination file.</rec>
        <rec key="failedMsg">Destination file is not updated if Checksum is 'md5' and the source is newer than destination file.</rec>
      </var>

      <var set="12" lvl="3" vid="865901"
           dsc="[nxArchive] Verify if destination file isn't updated if Checksum is 'md5' and the source is the same as destination file."
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>
        <rec key="newContent">ctime was changed.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo %fileContent%> %filePath%;mkdir -p %destinationPath%;cp %filePath% %destinationPath%/;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Checksum:md5;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">cat "%destinationPath%/%fileName%"|grep -i "%fileContent%" |wc -l |tr -d '\n'</rec>
        <rec key="expectedValue">1</rec>
        <rec key="successfulMsg">Destination file isn't updated if Checksum is 'md5' and the source is the same as destination file.</rec>
        <rec key="failedMsg">Destination file is updated even Checksum is 'md5' and the source is the same as destination file.</rec>
      </var>

      <var set="12" lvl="3" vid="865902"
           dsc="[nxArchive] Verify if error out when SourcePath doesn't exist."
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>
        <rec key="newContent">ctime was changed.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;</rec>
        <rec key="finalCmd"></rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Ensure:Present;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd"></rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">Send error out when SourcePath doesn't exist.</rec>
        <rec key="failedMsg">Didn't error out when SourcePath doesn't exist.</rec>
      </var>

      <var set="12" lvl="3" vid="865896"
           dsc="[nxArchive] Verify if destination file isn't updated if Checksum is 'ctime' and the source is older than destination file"
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo "%fileContent%" > %filePath%;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Checksum:ctime;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">ctime</rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">Destination file isn't updated if Checksum is 'ctime' and the source is older than destination file.</rec>
        <rec key="failedMsg">Destination file updated if Checksum is 'ctime' and the source is older than destination file.</rec>
      </var>

      <var set="12" lvl="3" vid="865898"
           dsc="[nxArchive] Verify if destination file isn't updated if Checksum is 'mtime' and the source is older than destination file"
           cls="DSCAzure.nxArchiveTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="sourcePath">/tmp/source.tar</rec>
        <rec key="destinationPath">/tmp/nxArchive</rec>
        <rec key="filePath">/tmp/test.txt</rec>
        <rec key="fileName">test.txt</rec>
        <rec key="fileContent">This is a test file.</rec>

        <rec key="initialCmd">rm -rf /tmp/*;touch %filePath%;echo %fileContent% > %filePath%;cd /tmp/;tar -cvf %sourcePath% %fileName%;</rec>
        <rec key="finalCmd">rm -rf /tmp/*;</rec>
        <!-- MOF Info. -->
        <rec key="propString">SourcePath:%sourcePath%;DestinationPath:%destinationPath%;Checksum:mtime;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!--Verify Linux State.-->
        <rec key="verificationCmd">mtime</rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">Destination file isn't updated if Checksum is 'mtime' and the source is older than destination file</rec>
        <rec key="failedMsg">Destination file updated if Checksum is 'mtime' and the source is older than destination file.</rec>
      </var>

    </section>

    <section sid="13" dsc="nxFirewall Provider">
      
      <var set="13" lvl="1" vid="690941"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if the firewall rule is set while Protocol is 'tcp' and Ensure is 'Present'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="ensure">Present</rec>
        <rec key="access">Allow</rec>
        <rec key="state">new</rec>
        
        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">firewall rule is set while Protocol is 'tcp' and Ensure is 'Present'.</rec>
        <rec key="failedMsg">fail to set firewall rule while Protocol is 'tcp' and Ensure is 'Present'.</rec>
      </var>

      <var set="13" lvl="2" vid="690942"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if the firewall rule is set while Protocol is 'udp' and Ensure is 'Present'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_udp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">udp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="ensure">Present</rec>
        <rec key="access">Allow</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">firewall rule is set while Protocol is 'udp' and Ensure is 'Present'.</rec>
        <rec key="failedMsg">fail to set firewall rule while Protocol is 'udp' and Ensure is 'Present'.</rec>
      </var>

      <var set="13" lvl="2" vid="690943"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if the firewall rule is set while Protocol is 'icmp' and Ensure is 'Present'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_icmp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">icmp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="ensure">Present</rec>
        <rec key="access">Allow</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">firewall rule is set while Protocol is 'icmp' and Ensure is 'Present'.</rec>
        <rec key="failedMsg">fail to set firewall rule while Protocol is 'icmp' and Ensure is 'Present'.</rec>
      </var>

      <var set="13" lvl="1" vid="690944"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if the firewall rule is removed while this rule exists before and Ensure is 'Absent'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="ensure">absent</rec>
        <rec key="access">Allow</rec>
        <rec key="state">new</rec>

        <rec key="initialSet">Name:%name%;Protocol:%protocol%;Ensure:Present;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">firewall rule is set while Protocol is 'tcp' and Ensure is 'Present'.</rec>
        <rec key="failedMsg">fail to set firewall rule while Protocol is 'tcp' and Ensure is 'Present'.</rec>
      </var>

      <var set="13" lvl="2" vid="691288"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if Access property is set as specified while the provided value is 'Allow'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <recm key="protocol">
          <val>tcp</val>
        </recm>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Direction:%direction%;Protocol:%protocol%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Direction:%direction%;Protocol:%protocol%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">Access property is set as specified while the provided value is 'Allow''.</rec>
        <rec key="failedMsg">Access property isn't set as specified while the provided value is 'Allow'.</rec>
      </var>

      <var set="13" lvl="2" vid="691289"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if Access property is set as specified while the provided value is 'Block'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <recm key="protocol">
          <val>udp</val>
        </recm>
        <rec key="direction">INPUT</rec>
        <rec key="access">Block</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">Access property is set as specified while the provided value is 'Block''.</rec>
        <rec key="failedMsg">Access property isn't set as specified while the provided value is 'Block'.</rec>
      </var>

      <var set="13" lvl="2" vid="691292"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if State property is set as specified while the provided value is 'NEW'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_udp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <recm key="protocol">
          <val>icmp</val>
        </recm>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="state">New</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">State property is set as specified while the provided value is 'NEW'.</rec>
        <rec key="failedMsg">State property isn't set as specified while the provided value is 'NEW'.</rec>
      </var>

      <var set="13" lvl="2" vid="691293"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if State property is set as specified while the provided value is 'Related'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_udp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <recm key="protocol">
          <val>tcp</val>
        </recm>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="state">Related</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">State property is set as specified while the provided value is 'Related'.</rec>
        <rec key="failedMsg">State property isn't set as specified while the provided value is 'Related'.</rec>
      </var>

      <var set="13" lvl="2" vid="691294"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if State property is set as specified while the provided value is 'ESTABLISHED'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_udp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <recm key="protocol">
          <val>udp</val>
        </recm>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="state">ESTABLISHED</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">State property is set as specified while the provided value is 'ESTABLISHED'.</rec>
        <rec key="failedMsg">State property isn't set as specified while the provided value is 'ESTABLISHED'.</rec>
      </var>

      <var set="13" lvl="2" vid="691302"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if Direction property is set as specified while the provided value is 'INPUT'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">icmp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">Direction property is set as specified while the provided value is 'INPUT'</rec>
        <rec key="failedMsg">Direction property isn't set as specified while the provided value is 'INPUT'</rec>
      </var>

      <var set="13" lvl="2" vid="691304"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if Direction property is set as specified while the provided value is 'OUTPUT'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">tcp</rec>
        <rec key="direction">OUTPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">Direction property is set as specified while the provided value is 'OUTPUT'</rec>
        <rec key="failedMsg">Direction property isn't set as specified while the provided value is 'OUTPUT'</rec>
      </var>

      <var set="13" lvl="2" vid="691305"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if Direction property is set as specified while the provided value is 'FORWARD'"
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">udp</rec>
        <rec key="direction">FORWARD</rec>
        <rec key="access">Allow</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">Direction property is set as specified while the provided value is 'FORWARD'</rec>
        <rec key="failedMsg">Direction property isn't set as specified while the provided value is 'FORWARD'</rec>
      </var>

      <var set="13" lvl="2" vid="691354"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if SourceHost property is set as specified."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="sourceHost">10.11.11.20</rec><rec key="state">new</rec>
        
        <rec key="initialSet"></rec>       
        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;Direction:%direction%;Access:%access%;FirewallType:%type%;SourceHost:%sourceHost%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Direction:%direction%;Access:%access%;FirewallType:%type%;SourceHost:%sourceHost%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">SourceHost property is set as specified.</rec>
        <rec key="failedMsg">SourceHost property isn't set as specified.</rec>
      </var>

      <var set="13" lvl="3" vid="691364"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if error out while the SourceHost property is not a right address."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="ensure">Present</rec>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="sourceHost">10.225.29.900</rec>
        
        <rec key="initialSet"></rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;SourceHost:%sourceHost%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification"></rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">error out while the SourceHost property is not a right address.</rec>
        <rec key="failedMsg">No error out while the SourceHost property is not a right address.</rec>
      </var>

      <var set="13" lvl="2" vid="691371"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if SourcePort property is set as specified."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="ensure">Present</rec>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="sourcePort">8080</rec>
        
        <rec key="initialSet"></rec>

        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;SourcePort:%sourcePort%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;SourcePort:%sourcePort%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">SourcePort property is set as specified.</rec>
        <rec key="failedMsg">SourcePort property isn't set as specified.</rec>
      </var>

      <var set="13" lvl="3" vid="691381"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if error out while the SourcePort value is invalid."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="ensure">Present</rec>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="sourcePort">-1</rec>
        
        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;SourcePort:%sourcePort%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification"></rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">error out while the SourcePort value is invalid.</rec>
        <rec key="failedMsg">No error out while the SourcePort value is invalid.</rec>
      </var>

      <var set="13" lvl="3" vid="691382"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if error out while the SourcePort value is out of range."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="ensure">Present</rec>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="sourcePort">65536</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;SourcePort:%sourcePort%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification"></rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">error out while the SourcePort value is out of range.</rec>
        <rec key="failedMsg">No error out while the SourcePort value is out of range.</rec>
      </var>

      <var set="13" lvl="2" vid="691386"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if DestinationHost property is set as specified."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="ensure">Present</rec>
        <rec key="protocol">udp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="destinationHost">10.225.29.124</rec>
        
        <rec key="initialSet"></rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;DestinationHost:%destinationHost%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;DestinationHost:%destinationHost%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">DestinationHost property is set as specified.</rec>
        <rec key="failedMsg">DestinationHost property isn't set as specified.</rec>
      </var>

      <var set="13" lvl="3" vid="691387"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if error out while the DestinationHost property is not a right address."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="ensure">Present</rec>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="destinationHost">10.225.29.900</rec>
        
        <rec key="initialSet"></rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;Direction:%direction%;Access:%access%;FirewallType:%type%;DestinationHost:%destinationHost%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification"></rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">error out while the DestinationHost property is not a right address.</rec>
        <rec key="failedMsg">No error out while the DestinationHost property is not a right address.</rec>
      </var>

      <var set="13" lvl="2" vid="691388"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if DestinationPort property is set as specified."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="ensure">Present</rec>
        <rec key="protocol">icmp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="destinationPort">8080</rec>
        
        <rec key="initialSet"></rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;Direction:%direction%;Access:%access%;FirewallType:%type%;DestinationPort:%destinationPort%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Direction:%direction%;Access:%access%;FirewallType:%type%;DestinationPort:%destinationPort%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">DestinationPort property is set as specified.</rec>
        <rec key="failedMsg">DestinationPort property isn't set as specified.</rec>
      </var>

      <var set="13" lvl="3" vid="691393"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if error out while the DestinationPort value is invalid."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="ensure">Present</rec>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="destinationPort">-1</rec>
        
        <rec key="initialSet"></rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;DestinationPort:%destinationPort%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification"></rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">DestinationPort property is set as specified.</rec>
        <rec key="failedMsg">DestinationPort property isn't set as specified.</rec>
      </var>

      <var set="13" lvl="3" vid="691394"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if error out while the DestinationPort value is out of range."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="ensure">Present</rec>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="destinationPort">65536</rec>
        
        <rec key="initialSet"></rec>
        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;Protocol:%protocol%;Ensure:%ensure%;Direction:%direction%;Access:%access%;FirewallType:%type%;DestinationPort:%destinationPort%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification"></rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">error out while the DestinationPort value is out of range.</rec>
        <rec key="failedMsg">No error out while the DestinationPort value is out of range.</rec>
      </var>

      <var set="13" lvl="2" vid="898435"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if Position is set as specified when the provided value is 'top'."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">icmp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="ensure">Present</rec>
        <rec key="access">Allow</rec>
        <rec key="position">top</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Position:%position%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Position:%position%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg"> Position is set as specified when the provided value is 'top'.</rec>
        <rec key="failedMsg"> Position isn't set as specified when the provided value is 'top'.</rec>
      </var>

      <var set="13" lvl="3" vid="898436"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if Position is set as specified when the provided value is 'after-top'."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="ensure">Present</rec>
        <rec key="access">Allow</rec>
        <rec key="position">after-top</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Position:%position%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Position:%position%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg"> Position is set as specified when the provided value is 'after-top'.</rec>
        <rec key="failedMsg"> Position isn't set as specified when the provided value is 'after-top'.</rec>
      </var>

      <var set="13" lvl="3" vid="898437"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if Position is set as specified when the provided value is 'end'."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">udp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="ensure">Present</rec>
        <rec key="access">Allow</rec>
        <rec key="position">end</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Position:%position%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Position:%position%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg"> Position is set as specified when the provided value is 'end'.</rec>
        <rec key="failedMsg"> Position isn't set as specified when the provided value is 'end'.</rec>
      </var>

      <var set="13" lvl="3" vid="898438"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if Position is set as specified when the provided value is 'before-end'."
           cls="DSCAzure.nxFirewallTest" permutation="rows">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <recm key="type">
          <val>iptables</val>
        </recm>
        <rec key="protocol">tcp</rec>
        <rec key="direction">INPUT</rec>
        <rec key="ensure">Present</rec>
        <rec key="access">Allow</rec>
        <rec key="position">before-end</rec>
        <rec key="state">new</rec>

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Protocol:%protocol%;Position:%position%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Protocol:%protocol%;Position:%position%;Direction:%direction%;Access:%access%;FirewallType:%type%;State:%state%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg"> Position is set as specified when the provided value is 'before-end'.</rec>
        <rec key="failedMsg"> Position isn't set as specified when the provided value is 'before-end'.</rec>
      </var>

      <var set="13" lvl="1" vid="899165"
           dsc="[nxFirewall] [IPv4/IPv6] Verify if the firewall rule is set while FirewallType is 'ip6tables'"
           cls="DSCAzure.nxFirewallTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">Rule1_tcp</rec>
        <rec key="type">ip6tables</rec>
        <rec key="direction">INPUT</rec>
        <rec key="access">Allow</rec>
        <rec key="addrFamily">IPv6</rec>
        <rec key="destinationHost">2001::</rec>       

        <rec key="initialSet"></rec>
        <!-- MOF Info. -->

        <rec key="propString">Name:%name%;Direction:%direction%;Access:%access%;FirewallType:%type%;AddressFamily:%addrFamily%;DestinationHost:%destinationHost%;</rec>
        <rec key="psScript">%dscSender%</rec>

        <!-- Verify Linux State. -->
        <rec key="verification">Name:%name%;Direction:%direction%;Access:%access%;FirewallType:%type%;AddressFamily:%addrFamily%;DestinationHost:%destinationHost%;</rec>
        <rec key="verificationCmd"></rec>
        <rec key="successfulMsg">firewall rule is set while FirewallType is 'ip6tables'.</rec>
        <rec key="failedMsg">fail to set firewall rule while FirewallType is 'ip6tables'.</rec>
      </var>
      
    </section>

    <section sid="14" dsc="nxComputer Provider">

      <var set="14" lvl="1" vid="691061"
           dsc="[nxComputer] Verify if the computer name is changed as specified in Name property."
           cls="DSCAzure.nxComputerTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">New-ComputerName</rec>
        <rec key="initialCmd">cp /etc/hosts /tmp/hosts_bak</rec>
        <rec key="finalCmd">mv /tmp/hosts_bak /etc/hosts;hostname %nxHostName%;</rec>
        
        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">hostname| tr -d '\n';</rec>
        <rec key="expectedValue">%name%</rec>
        <rec key="successfulMsg">Computer name is changed as specified in Name property.</rec>
        <rec key="failedMsg">Computer name isn't changed as specified in Name property.</rec>
      </var>

      <var set="14" lvl="1" vid="691063"
           dsc="[nxComputer] Verify if the DNS domain name is changed as specified in DNSDomainName property."
           cls="DSCAzure.nxComputerTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">%nxHostName%</rec>
        <rec key="dnsDomainName">test.com</rec>
        
        <rec key="initialCmd">cp /etc/hosts /tmp/hosts_bak</rec>
        <rec key="finalCmd">>mv /tmp/hosts_bak /etc/hosts;</rec>

        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;DNSDomainName:%dnsDomainName%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">dnsdomainname| tr -d '\n';</rec>
        <rec key="expectedValue">%dnsDomainName%</rec>
        <rec key="successfulMsg">DNS domain name is changed as specified in DNSDomainName property.</rec>
        <rec key="failedMsg">DNS domain name isn't changed as specified in DNSDomainName property.</rec>
      </var>

      <var set="14" lvl="1" vid="691064"
            dsc="[nxComputer] Verify if the time zone name is changed as specified in TimeZoneName property."
            cls="DSCAzure.nxComputerTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">%nxHostName%</rec>
        <rec key="timeZoneName">GMT</rec>
        <rec key="initialCmd">cp /etc/localtime /etc/localtime-old;</rec>
        <rec key="finalCmd">mv /etc/localtime-old /etc/localtime</rec>

        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;TimeZoneName:%timeZoneName%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">date |awk '{print $5}'|tr -d '\n'</rec>
        <rec key="expectedValue">%timeZoneName%</rec>
        <rec key="successfulMsg">time zone name is changed as specified in TimeZoneName property.</rec>
        <rec key="failedMsg">time zone name isn't changed as specified in TimeZoneName property.</rec>
      </var>

      <var set="14" lvl="2" vid="691065"
            dsc="[nxComputer] Verify if the time zone name is changed as specified in AlternateTimeZoneName property whille TimeZoneName is a invalid one."
            cls="DSCAzure.nxComputerTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">%nxHostName%</rec>
        <rec key="timeZoneName">Invalid</rec>
        <rec key="alternateTimeZoneName">UTC</rec>
        <rec key="initialCmd">cp /etc/localtime /etc/localtime-old;</rec>
        <rec key="finalCmd">mv /etc/localtime-old /etc/localtime;</rec>

        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;TimeZoneName:%timeZoneName%;AlternateTimeZoneName:%alternateTimeZoneName%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">date |awk '{print $5}'</rec>
        <rec key="expectedValue">%alternateTimeZoneName%</rec>
        <rec key="successfulMsg">time zone name is changed as specified in AlternateTimeZoneName property whille TimeZoneName is a invalid one.</rec>
        <rec key="failedMsg">time zone name isn't changed as specified in AlternateTimeZoneName property whille TimeZoneName is a invalid one.</rec>
      </var>

      <var set="14" lvl="2" vid="691066"
            dsc="[nxComputer] Verify if the time zone name is unchanged if the current time zone matches the TimeZoneName."
            cls="DSCAzure.nxComputerTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">%nxHostName%</rec>
        <rec key="timeZoneName">UTC</rec>
        <rec key="initialCmd">cp /etc/localtime /etc/localtime-old;</rec>
        <rec key="finalCmd">mv /etc/localtime-old /etc/localtime;</rec>

        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;TimeZoneName:%timeZoneName%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">date |awk '{print $5}' | tr -d '\n'</rec>
        <rec key="expectedValue">%timeZoneName%</rec>
        <rec key="successfulMsg">time zone name is unchanged if the current time zone matches the TimeZoneName.</rec>
        <rec key="failedMsg">time zone name is changed if the current time zone matches the TimeZoneName.</rec>
      </var>

      <var set="14" lvl="2" vid="691067"
            dsc="[nxComputer] Verify if the time zone name is unchanged while TimeZoneName is invalid and the current time zone matches the AlternateTimeZoneName."
            cls="DSCAzure.nxComputerTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">%nxHostName%</rec>
        <rec key="timeZoneName">invalid</rec>
        <rec key="alternateTimeZoneName">UTC</rec>
        <rec key="initialCmd">cp /etc/localtime /etc/localtime-old;</rec>
        <rec key="finalCmd">mv /etc/localtime-old /etc/localtime;</rec>

        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;TimeZoneName:%timeZoneName%;AlternateTimeZoneName:%alternateTimeZoneName%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">date |awk '{print $5}' | tr -d '\n'</rec>
        <rec key="expectedValue">%alternateTimeZoneName%</rec>
        <rec key="successfulMsg">time zone name is unchanged while TimeZoneName is invalid and the current time zone matches the AlternateTimeZoneName.</rec>
        <rec key="failedMsg">time zone name is changed while TimeZoneName is invalid and the current time zone matches the AlternateTimeZoneName.</rec>
      </var>

      <var set="14" lvl="3" vid="691069"
            dsc="[nxComputer] Verify if the time zone name is changed as specified in AlternateTimeZoneName property whille TimeZoneName is not provided."
            cls="DSCAzure.nxComputerTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">%nxHostName%</rec>
        <rec key="alternateTimeZoneName">GMT</rec>
        <rec key="initialCmd">cp /etc/localtime /etc/localtime-old;</rec>
        <rec key="finalCmd">mv /etc/localtime-old /etc/localtime;</rec>

        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;AlternateTimeZoneName:%alternateTimeZoneName%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">date |awk '{print $5}' | tr -d '\n'</rec>
        <rec key="expectedValue">%alternateTimeZoneName%</rec>
        <rec key="successfulMsg">time zone name is changed as specified in AlternateTimeZoneName property whille TimeZoneName is not provided.</rec>
        <rec key="failedMsg">time zone name is unchanged as specified in AlternateTimeZoneName property whille TimeZoneName is not provided.</rec>
      </var>

      <var set="14" lvl="3" vid="691071"
            dsc="[nxComputer] Verify if error out while both AlternateTimeZoneName and TimeZoneName are invalid."
            cls="DSCAzure.nxComputerTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">%nxHostName%</rec>
        <rec key="timeZoneName">Invalid1</rec>
        <rec key="alternateTimeZoneName">Invalid2</rec>
        <rec key="initialCmd">cp /etc/localtime /etc/localtime-old;</rec>
        <rec key="finalCmd">mv /etc/localtime-old /etc/localtime;</rec>

        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;TimeZoneName:%timeZoneName%;AlternateTimeZoneName:%alternateTimeZoneName%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <rec key="psErrorMsg">%configErrorMsg%</rec>
        
        <!-- Verify Linux State. -->
        <rec key="verificationCmd"></rec>
        <rec key="expectedValue"></rec>
        <rec key="successfulMsg">error out while both AlternateTimeZoneName and TimeZoneName are invalid.</rec>
        <rec key="failedMsg">No error out while both AlternateTimeZoneName and TimeZoneName are invalid.</rec>
      </var>

      <var set="14" lvl="3" vid="691072"
            dsc="[nxComputer] Verify if the computer name is unchanged if current computer name matches the Name property."
            cls="DSCAzure.nxComputerTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">%nxHostName%</rec>
        <rec key="initialCmd">cp /etc/hosts /tmp/hosts_bak</rec>
        <rec key="finalCmd">mv /tmp/hosts_bak /etc/hosts</rec>

        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">hostname | tr -d '\n'</rec>
        <rec key="expectedValue">%name%</rec>
        <rec key="successfulMsg">computer name is unchanged if current computer name matches the Name property.</rec>
        <rec key="failedMsg">computer name is changed if current computer name matches the Name property.</rec>
      </var>

      <var set="14" lvl="3" vid="691073"
            dsc="[nxComputer] Verify if the DNS domain name is unchanged while current one matches DNSDomainName property."
            cls="DSCAzure.nxComputerTest">
        <snipref id="Variables" />
        <!-- Linux Initial State. -->
        <rec key="name">%nxHostName%</rec>
        <rec key="dnsDomainName">scx.com</rec>
        <rec key="initialCmd">cp /etc/hosts /tmp/hosts_bak</rec>
        <rec key="finalCmd">mv /tmp/hosts_bak /etc/hosts</rec>

        <!-- MOF Info. -->
        <rec key="propString">Name:%name%;DNSDomainName:%dnsDomainName%;</rec>
        <rec key="psScript">%dscSender%</rec>
        <!-- Verify Linux State. -->
        <rec key="verificationCmd">dnsdomainname</rec>
        <rec key="expectedValue">%dnsDomainName%</rec>
        <rec key="successfulMsg">DNS domain name is unchanged while current one matches DNSDomainName property.</rec>
        <rec key="failedMsg">DNS domain name is changed while current one matches DNSDomainName property.</rec>
      </var>

    </section>
  </section>
</varmap>